from aiogram.enums import ParseMode

def format_swap_message(tx_hash, sender, sender_url, amount_in, token_in, token_in_url, amount_out, token_out, token_out_url, usd_value):
    try:
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å —É—á—ë—Ç–æ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def format_number(value):
            if value == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" or not value:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                num = float(value)
                if num == 0:
                    return "0.00"
                elif 0 < num < 0.0001:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
                    return f"{num:.6e}"
                elif 0.0001 <= num < 1:  # –î–ª—è —á–∏—Å–µ–ª –æ—Ç 0.0001 –¥–æ 1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
                    return f"{num:.6f}".rstrip('0').rstrip('.')
                else:  # –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 2 –∑–Ω–∞–∫–∞–º–∏
                    return f"{num:,.2f}"
            except (ValueError, TypeError):
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã, —É—á–∏—Ç—ã–≤–∞—è –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        formatted_amount_in = format_number(amount_in)
        formatted_amount_out = format_number(amount_out)
        formatted_usd = format_number(usd_value)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üì¢ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [{sender}]({sender_url})\n"
            f"üì• –¢–æ–∫–µ–Ω IN: [{token_in}]({token_in_url}) ‚Äî {formatted_amount_in}\n"
            f"üì§ –¢–æ–∫–µ–Ω OUT: [{token_out}]({token_out_url}) ‚Äî {formatted_amount_out}\n"
            f"üí∞ USD: ${formatted_usd}\n"
            f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://arbiscan.io/tx/{tx_hash})"
        )
        return message, ParseMode.MARKDOWN
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", None
from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_tracked_tokens_list, get_token_control_keyboard, get_token_name_confirmation_keyboard, get_thread_confirmation_keyboard, get_back_button
from ..states import TokenStates
from database import Database
from utils.logger_config import logger

db = Database()

async def show_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'show_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer()

async def add_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω' –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):", reply_markup=get_back_button())
    await state.set_state(TokenStates.waiting_for_contract_address)
    await callback.answer()

async def process_contract_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞: {message.text}")
    contract_address = message.text.strip()
    if not contract_address.startswith("0x") or len(contract_address) != 42:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... (42 —Å–∏–º–≤–æ–ª–∞).", reply_markup=get_back_button())
        return
    existing_token = db.tracked_tokens.get_token_by_id(contract_address)
    if existing_token:
        await message.answer("‚ùå –¢–∞–∫–æ–π —Ç–æ–∫–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!", reply_markup=get_back_button())
        await state.clear()
        return
    await state.update_data(contract_address=contract_address)
    await message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ {contract_address[-4:]}:", reply_markup=get_back_button())
    await state.set_state(TokenStates.waiting_for_name_confirmation)

async def confirm_token_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º —Ç–æ–∫–µ–Ω–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è —Ç–æ–∫–µ–Ω–∞: {message.text}")
    token_name = message.text.strip()
    if not token_name:
        await message.answer("‚ùå –ò–º—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    contract_address = user_data["contract_address"]
    await state.update_data(token_name=token_name)
    await message.answer(f"üìù –¢–æ–∫–µ–Ω {token_name} –¥–ª—è –∞–¥—Ä–µ—Å–∞ {contract_address[-4:]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ?\n–ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /get_thread_id –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç—Ä–µ–¥–∞.", reply_markup=get_thread_confirmation_keyboard())
    await state.set_state(TokenStates.waiting_for_thread_confirmation)

async def reject_token_name(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'reject_token_name' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info("–û—Ç–º–µ–Ω–∞ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):", reply_markup=get_back_button())
    await state.set_state(TokenStates.waiting_for_contract_address)
    await callback.answer()

async def thread_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info("–¢—Ä–µ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞–∂–∞—Ç–æ")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789):", reply_markup=get_back_button())
    await state.set_state(TokenStates.waiting_for_thread_id)
    await callback.answer()

async def thread_not_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_not_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info("–¢—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞–∂–∞—Ç–æ")
    user_data = await state.get_data()
    contract_address = user_data["contract_address"]
    token_name = user_data["token_name"]
    db.tracked_tokens.add_tracked_token(contract_address, token_name)
    await callback.message.edit_text(f"üíé –¢–æ–∫–µ–Ω {token_name} ({contract_address[-4:]}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=get_main_menu())
    await state.clear()
    await callback.answer()

async def process_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Ç—Ä–µ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω ID —Ç—Ä–µ–¥–∞: {message.text}")
    thread_id = message.text.strip()
    if not thread_id.isdigit():
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    contract_address = user_data["contract_address"]
    token_name = user_data["token_name"]
    db.tracked_tokens.add_tracked_token(contract_address, token_name, thread_id=thread_id)
    await message.answer(f"üíé –¢–æ–∫–µ–Ω {token_name} ({contract_address[-4:]}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ —Ç—Ä–µ–¥ {thread_id}!", reply_markup=get_main_menu())
    await state.clear()

async def edit_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {callback.data}")
    token_id = callback.data.replace("edit_token_", "")
    token = db.tracked_tokens.get_token_by_id(token_id)
    if not token:
        await callback.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(f"üìù –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token[2]}: {token[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):", reply_markup=get_back_button())
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_edit_thread_id)
    await callback.answer()

async def edit_token_thread(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token_thread' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {callback.data}")
    token_id = callback.data.replace("edit_token_thread_", "")
    token = db.tracked_tokens.get_token_by_id(token_id)
    if not token:
        await callback.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(f"üìù –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token[2]}: {token[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):", reply_markup=get_back_button())
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_edit_thread_id)
    await callback.answer()

async def process_edit_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º ID —Ç—Ä–µ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {message.text}")
    thread_id = message.text.strip()
    user_data = await state.get_data()
    token_id = user_data["token_id"]
    token = db.tracked_tokens.get_token_by_id(token_id)
    if not token:
        await message.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_back_button())
        await state.clear()
        return
    new_thread_id = thread_id if thread_id.isdigit() else None
    db.tracked_tokens.update_token_thread(token_id, new_thread_id)
    token_name = token[2]
    await message.answer(f"üíé –¢—Ä–µ–¥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_name} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_thread_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}!", reply_markup=get_token_control_keyboard(token_id))
    await state.clear()

async def delete_token(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'delete_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {callback.data}")
    token_id = callback.data.replace("delete_token_", "")
    token = db.tracked_tokens.get_token_by_id(token_id)
    if not token:
        await callback.answer("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    db.tracked_tokens.delete_tracked_token(token_id)
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer(f"üóë –¢–æ–∫–µ–Ω {token[2]} —É–¥–∞–ª–µ–Ω!")
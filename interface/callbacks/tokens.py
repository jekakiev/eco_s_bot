from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_tracked_tokens_list, get_back_button, get_token_control_keyboard, get_token_name_confirmation_keyboard, get_thread_confirmation_keyboard, get_main_menu
from ..states import TokenStates
from database import Database
from utils.logger_config import logger
import aiohttp
from config.settings import ARBISCAN_API_KEY

db = Database()

async def show_tokens(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)
    await callback.answer()

async def add_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω' –Ω–∞–∂–∞—Ç–∞")
    await state.set_state(TokenStates.waiting_for_contract_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_contract_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞: {message.text}")
    contract_address = message.text.lower()
    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "offset": 0,
        "limit": 10,
        "apikey": ARBISCAN_API_KEY
    }
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.arbiscan.io/api", params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("status") == "1":
                    token_info = data["result"][0]
                    token_name = token_info.get("tokenName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    await state.update_data(contract_address=contract_address, token_name=token_name)
                    await state.set_state(TokenStates.waiting_for_name_confirmation)
                    await message.answer(f"ü™ô –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: *{token_name}*. –í—Å—ë –≤–µ—Ä–Ω–æ?", parse_mode="Markdown", reply_markup=get_token_name_confirmation_keyboard())
                else:
                    if int(db.get_setting("API_ERRORS") or 1):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {contract_address}: {data.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_button())
            else:
                if int(db.get_setting("API_ERRORS") or 1):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {contract_address}: HTTP {response.status}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_button())

async def confirm_token_name(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_token_name' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    await state.set_state(TokenStates.waiting_for_thread_confirmation)
    await callback.message.edit_text("üßµ –°–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –≤–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞?", reply_markup=get_thread_confirmation_keyboard())
    await callback.answer()

async def reject_token_name(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'reject_token_name' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÇ –û–π, –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–ª–æ–¥–µ—Ü.\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def thread_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞")
    await state.set_state(TokenStates.waiting_for_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )
    await callback.answer()

async def thread_not_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_not_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–£–∫–∞–∑–∞–Ω–∏–µ, —á—Ç–æ —Ç—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÖ –í–µ—Ç–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞? –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–æ–∑–¥–∞–π –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def process_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Ç—Ä–µ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω ID —Ç—Ä–µ–¥–∞: {message.text}")
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        db.add_tracked_token(data["token_name"], data["contract_address"], thread_id)
        if int(db.get_setting("INTERFACE_INFO") or 0):
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω: {data['token_name']} ({data['contract_address']}) —Å —Ç—Ä–µ–¥–æ–º {thread_id}")
        text, reply_markup = get_tracked_tokens_list()
        await state.clear()
        await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n_________\n{text}", reply_markup=reply_markup)
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.", reply_markup=get_back_button())

async def edit_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    token = db.get_tracked_token_by_id(token_id)
    text = f"–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
    await callback.message.edit_text(text, reply_markup=get_token_control_keyboard(token_id))
    await callback.answer()

async def edit_token_thread(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token_thread' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_edit_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )
    await callback.answer()

async def process_edit_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º ID —Ç—Ä–µ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞: {message.text}")
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        token_id = data["token_id"]
        token = db.get_tracked_token_by_id(token_id)
        db.update_tracked_token(token_id, token["token_name"], thread_id)
        text = f"‚úÖ –¢—Ä–µ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!\n_________\n–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
        await state.clear()
        await message.answer(text, reply_markup=get_token_control_keyboard(token_id))
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–¥–∞.", reply_markup=get_back_button())

async def delete_token(callback: types.CallbackQuery):
    logger.info(f"Callback 'delete_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    db.remove_tracked_token(token_id)
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.edit_text(f"üóë –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω!\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()
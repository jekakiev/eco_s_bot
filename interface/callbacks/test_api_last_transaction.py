from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_wallets_list, get_back_button
from ..states import WalletStates
from database import Database
from utils.logger_config import logger
from utils.arbiscan import get_token_transactions
import aiohttp
from config.settings import ARBISCAN_API_KEY

db = Database()

async def show_test_api(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'test_api_last_transaction' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç –∞–ø–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞)' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_wallets_list()
    msg = await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await state.update_data(test_api_message_id=msg.message_id)
    await state.set_state(WalletStates.waiting_for_wallet_selection)
    await callback.answer()

async def select_wallet(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'select_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫: {callback.data}")
    wallet_id = callback.data.replace("select_wallet_", "")
    wallet = db.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–Ω–æ–≤—ñ—à–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ö–µ—à–∞ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    latest_tx = await get_latest_transaction(wallet['address'])
    swap_tx_data = await get_latest_swap_transaction(wallet['address'])
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é (—è–∫—â–æ —î)
    if swap_tx_data.startswith("‚ùå"):
        swap_text = swap_tx_data
    else:
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
        chunk_size = 4000
        for i in range(0, len(swap_tx_data), chunk_size):
            chunk = swap_tx_data[i:i + chunk_size]
            await callback.message.answer(
                f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet['name']} ({wallet['address']}):\n\n{chunk}",
                disable_web_page_preview=True
            )
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ö–µ—à –Ω–∞–π–Ω–æ–≤—ñ—à–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
    if latest_tx.startswith("‚ùå"):
        await callback.message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {latest_tx}", disable_web_page_preview=True)
    else:
        tx_hash = latest_tx.get("hash", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        tx_link = f"https://arbiscan.io/tx/{tx_hash}"
        await callback.message.answer(
            f"üîó –•–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash}\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Arbiscan: {tx_link}",
            disable_web_page_preview=True
        )
    
    await callback.message.edit_reply_markup(reply_markup=get_main_menu())
    await state.clear()
    await callback.answer()

async def get_latest_transaction(wallet_address):
    api_key = ARBISCAN_API_KEY
    base_url = "https://api.arbiscan.io/api"
    params = {
        "module": "account",
        "action": "txlist",
        "address": wallet_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "limit": 1,  # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ –æ–¥–Ω—É –æ—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        "apikey": api_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("status") == "1" and data.get("result"):
                    return data["result"][0]  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                else:
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}"

async def get_latest_swap_transaction(wallet_address):
    api_key = ARBISCAN_API_KEY
    base_url = "https://api.arbiscan.io/api"
    # –°–ø–∏—Å–æ–∫ –≤—ñ–¥–æ–º–∏—Ö methodId –¥–ª—è —Å–≤–æ–ø—ñ–≤ —É Uniswap V2/V3
    swap_method_ids = [
        "0x38ed1739",  # swapExactTokensForTokens (Uniswap V2)
        "0x7ff36ab5",  # swapTokensForExactTokens (Uniswap V2)
        "0x022c0d9f",  # exactInputSingle (Uniswap V3)
        "0x0298adcd",  # exactOutputSingle (Uniswap V3)
        # –î–æ–¥–∞–π —ñ–Ω—à—ñ methodId, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    ]
    # –ê–¥—Ä–µ—Å–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤ DEX –Ω–∞ Arbitrum
    dex_router_addresses = [
        "0xE592427A0AEce92De3Edee1F18E0157C05861564",  # Uniswap Router V2
        "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",  # Uniswap Router V3
        # –î–æ–¥–∞–π —ñ–Ω—à—ñ –∞–¥—Ä–µ—Å–∏ DEX, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SushiSwap, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    ]

    params = {
        "module": "account",
        "action": "txlist",
        "address": wallet_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "limit": 50,  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ 50 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        "apikey": api_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("status") == "1" and data.get("result"):
                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    for transaction in data["result"]:
                        to_address = transaction.get("to", "").lower()
                        method_id = transaction.get("methodId", "").lower()
                        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: to={to_address}, methodId={method_id}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–≤–æ–ø (to ‚Äî –∞–¥—Ä–µ—Å–∞ DEX —ñ methodId —Å–ø—ñ–≤–ø–∞–¥–∞—î)
                        if (to_address in [addr.lower() for addr in dex_router_addresses] and 
                            method_id in [mid.lower() for mid in swap_method_ids]):
                            return str(transaction)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–æ–ø-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö."
                else:
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}"
from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_wallets_list, get_wallet_control_keyboard, get_tokens_keyboard, get_back_button
from ..states import WalletStates
from database import Database
from utils.logger_config import logger

db = Database()

async def show_wallets(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'show_wallets' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_wallets_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer()

async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):", reply_markup=get_back_button())
    await state.set_state(WalletStates.waiting_for_address)
    await callback.answer()

async def process_wallet_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    address = message.text.strip()
    if not address.startswith("0x") or len(address) != 42:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... (42 —Å–∏–º–≤–æ–ª–∞).", reply_markup=get_back_button())
        return
    await state.update_data(wallet_address=address)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await state.set_state(WalletStates.waiting_for_name)

async def process_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    address = user_data["wallet_address"]
    existing_wallet = db.wallets.get_wallet_by_address(address)
    if existing_wallet:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_back_button())
        await state.clear()
        return
    db.wallets.add_wallet(address, name)
    await message.answer(f"üí∞ –ö–æ—à–µ–ª–µ–∫ {name} ({address}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=get_main_menu())
    await state.clear()

async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {callback.data}")
    token = callback.data.replace("toggle_token_", "")
    user_data = await state.get_data()
    wallet_id = user_data.get("wallet_id")
    if not wallet_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫!", show_alert=True)
        return
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    tokens = wallet[3] or []  # tokens ‚Äî —Ü–µ —á–µ—Ç–≤–µ—Ä—Ç–µ –ø–æ–ª–µ (—ñ–Ω–¥–µ–∫—Å 3)
    if token in tokens:
        tokens.remove(token)
    else:
        tokens.append(token)
    db.wallets.update_wallet_tokens(wallet_id, tokens)
    text, reply_markup = get_tokens_keyboard(tokens, is_edit=True)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]}:\n\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–∂–∞—Ç–æ")
    user_data = await state.get_data()
    wallet_id = user_data.get("wallet_id")
    if not wallet_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫!", show_alert=True)
        return
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    tokens = user_data.get("selected_tokens", [])
    db.wallets.update_wallet_tokens(wallet_id, tokens)
    text = f"üí∞ –¢–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]} ({wallet[1]}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n" + "\n".join([f"‚úÖ {t}" for t in tokens]) if tokens else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))
    await state.clear()
    await callback.answer()

async def save_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'save_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–∂–∞—Ç–æ")
    user_data = await state.get_data()
    wallet_id = user_data.get("wallet_id")
    if not wallet_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫!", show_alert=True)
        return
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    tokens = user_data.get("selected_tokens", [])
    db.wallets.update_wallet_tokens(wallet_id, tokens)
    text = f"üí∞ –¢–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]} ({wallet[1]}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n" + "\n".join([f"‚úÖ {t}" for t in tokens]) if tokens else "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))
    await state.clear()
    await callback.answer()

async def delete_wallet(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'delete_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("delete_wallet_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    db.wallets.delete_wallet(wallet_id)
    text, reply_markup = get_wallets_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer(f"üóë –ö–æ—à–µ–ª–µ–∫ {wallet[2]} —É–¥–∞–ª–µ–Ω!")

async def rename_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'rename_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("rename_wallet_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]}:", reply_markup=get_back_button())
    await state.update_data(wallet_id=wallet_id)
    await state.set_state(WalletStates.waiting_for_new_name)
    await callback.answer()

async def process_new_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    wallet_id = user_data["wallet_id"]
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_back_button())
        await state.clear()
        return
    db.wallets.rename_wallet(wallet_id, new_name)
    await message.answer(f"üí∞ –ö–æ—à–µ–ª–µ–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {new_name}!", reply_markup=get_wallet_control_keyboard(wallet_id))
    await state.clear()

async def edit_tokens_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.settings.get_setting("INTERFACE_INFO", "0")):  # –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ db.settings.get_setting
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("edit_tokens_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    tokens = wallet[3] or []
    await state.update_data(wallet_id=wallet_id, selected_tokens=tokens)
    text, reply_markup = get_tokens_keyboard(tokens, is_edit=True)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]}:\n\n{text}", reply_markup=reply_markup)
    await state.set_state(WalletStates.waiting_for_tokens)
    await callback.answer()
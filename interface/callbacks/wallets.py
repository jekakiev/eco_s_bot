from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_wallets_list, get_wallet_control_keyboard, get_tokens_keyboard, get_back_button
from ..states import WalletStates
from app_config import db  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ db –∑ app_config
from utils.logger_config import logger, should_log

async def show_wallets(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'show_wallets' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if should_log("interface"):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_wallets_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer()

async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if should_log("interface"):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):", reply_markup=get_back_button())
    await state.set_state(WalletStates.waiting_for_address)
    await callback.answer()

async def process_wallet_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if should_log("interface"):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    address = message.text.strip()
    if not address.startswith("0x") or len(address) != 42:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... (42 —Å–∏–º–≤–æ–ª–∞).", reply_markup=get_back_button())
        return
    await state.update_data(wallet_address=address)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await state.set_state(WalletStates.waiting_for_name)

async def process_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if should_log("interface"):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    address = user_data["wallet_address"]
    existing_wallet = db.wallets.get_wallet_by_address(address)
    if existing_wallet:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=get_back_button())
        await state.clear()
        return
    await state.update_data(wallet_name=name)
    await state.set_state(WalletStates.waiting_for_tokens)
    await state.update_data(selected_tokens=[])
    tracked_tokens = [token[2] for token in db.tracked_tokens.get_all_tracked_tokens()]  # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã (token[2] ‚Äî token_name)
    if not tracked_tokens:
        await message.answer("ü™ô –¢–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã' -> '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω'.", reply_markup=get_main_menu())
        await state.clear()
    else:
        await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([], is_edit=False))

async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if should_log("interface"):
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {callback.data}")
    token = callback.data.replace("toggle_token_", "")
    user_data = await state.get_data()
    selected_tokens = user_data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    is_edit = "wallet_id" in user_data
    await callback.message.edit_reply_markup(reply_markup=get_tokens_keyboard(selected_tokens, is_edit=is_edit))
    await callback.answer()

async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if should_log("interface"):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–∂–∞—Ç–æ")
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.wallets.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {wallet_name} ({wallet_address[-4:]}) –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
    await callback.answer()

async def save_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'save_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if should_log("interface"):
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–∂–∞—Ç–æ")
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.wallets.update_wallet_tokens(wallet_id, ",".join(selected_tokens))
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet[2]}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet[1][-4:]}"  # wallet[2] ‚Äî name, wallet[1] ‚Äî address
    await state.clear()
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))
    await callback.answer()

async def delete_wallet(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'delete_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if should_log("interface"):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("delete_wallet_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    db.wallets.delete_wallet(wallet_id)
    text, reply_markup = get_wallets_list()
    await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await callback.answer(f"üóë –ö–æ—à–µ–ª–µ–∫ {wallet[2]} —É–¥–∞–ª–µ–Ω!")

async def rename_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'rename_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if should_log("interface"):
        logger.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("rename_wallet_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await callback.message.edit_text(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]}:", reply_markup=get_back_button())
    await state.update_data(wallet_id=wallet_id)
    await state.set_state(WalletStates.waiting_for_new_name)
    await callback.answer()

async def process_new_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if should_log("interface"):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_back_button())
        return
    user_data = await state.get_data()
    wallet_id = user_data["wallet_id"]
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_back_button())
        await state.clear()
        return
    db.wallets.rename_wallet(wallet_id, new_name)
    await message.answer(f"üí∞ –ö–æ—à–µ–ª–µ–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {new_name}!", reply_markup=get_wallet_control_keyboard(wallet_id))
    await state.clear()

async def edit_tokens_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if should_log("interface"):
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {callback.data}")
    wallet_id = callback.data.replace("edit_tokens_", "")
    wallet = db.wallets.get_wallet_by_id(wallet_id)
    if not wallet:
        await callback.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    tokens = wallet[3].split(",") if wallet[3] else []  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ —î
    tracked_tokens = [token[2] for token in db.tracked_tokens.get_all_tracked_tokens()]  # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã (token[2] ‚Äî token_name)
    if not tracked_tokens:
        await callback.message.edit_text("ü™ô –¢–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã' -> '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω'.", reply_markup=get_main_menu())
        await state.clear()
    else:
        await state.update_data(wallet_id=wallet_id, selected_tokens=tokens)
        await callback.message.edit_text(f"ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[2]}:", reply_markup=get_tokens_keyboard(tokens, is_edit=True))
        await state.set_state(WalletStates.waiting_for_tokens)
    await callback.answer()
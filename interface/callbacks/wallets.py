from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_wallets_list, get_back_button, get_tokens_keyboard, get_wallet_control_keyboard, get_main_menu
from ..states import WalletStates
from database import Database
from utils.logger_config import logger

db = Database()

async def show_wallets(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_wallets' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    try:
        text, reply_markup = get_wallets_list()
        await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)
        await callback.answer()
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_back_button())
        await callback.answer()

async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' –Ω–∞–∂–∞—Ç–∞")
    await state.set_state(WalletStates.waiting_for_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_wallet_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    await state.update_data(wallet_address=message.text)
    await state.set_state(WalletStates.waiting_for_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

async def process_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletStates.waiting_for_tokens)
    await state.update_data(selected_tokens=[])
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([], is_edit=False))

async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞: {token}")
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    is_edit = "wallet_id" in data
    await callback.message.edit_reply_markup(reply_markup=get_tokens_keyboard(selected_tokens, is_edit=is_edit))
    await callback.answer()

async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
    await callback.answer()

async def save_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'save_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞")
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.update_wallet_tokens(wallet_id, ",".join(selected_tokens))
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))
    await callback.answer()

async def delete_wallet(callback: types.CallbackQuery):
    logger.info(f"Callback 'delete_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª—ë–Ω!", reply_markup=get_main_menu())
    await callback.answer()

async def rename_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'rename_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    await state.update_data(wallet_id=wallet_id)
    await state.set_state(WalletStates.waiting_for_new_name)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_new_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    new_name = message.text
    db.update_wallet_name(wallet_id, new_name)
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –ò–º—è –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await message.answer(text, reply_markup=get_wallet_control_keyboard(wallet_id))

async def edit_tokens_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    wallet = db.get_wallet_by_id(wallet_id)
    current_tokens = wallet["tokens"].split(",") if wallet["tokens"] else []
    await state.update_data(wallet_id=wallet_id, selected_tokens=current_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(current_tokens, is_edit=True))
    await callback.answer()
from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_commands_list, get_settings_list, get_interval_edit_keyboard, get_main_menu
from ..states import SettingStates
from database import Database
from utils.logger_config import logger, update_log_settings
import asyncio
from config.bot_instance import bot

db = Database()

async def show_commands(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_commands' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_commands_list()
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=reply_markup)
    await callback.answer()

async def show_settings(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'show_settings' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    settings = db.get_all_settings()
    check_interval = settings.get("CHECK_INTERVAL", "10")
    send_last = "‚úÖ–í–ö–õ" if settings.get("SEND_LAST_TRANSACTION", "0") == "1" else "‚ùå–í–´–ö–õ"
    api_errors = "‚úÖ–í–ö–õ" if settings.get("API_ERRORS", "1") == "1" else "‚ùå–í–´–ö–õ"
    transaction_info = "‚úÖ–í–ö–õ" if settings.get("TRANSACTION_INFO", "0") == "1" else "‚ùå–í–´–ö–õ"
    interface_info = "‚úÖ–í–ö–õ" if settings.get("INTERFACE_INFO", "0") == "1" else "‚ùå–í–´–ö–õ"
    debug = "‚úÖ–í–ö–õ" if settings.get("DEBUG", "0") == "1" else "‚ùå–í–´–ö–õ"
    text, reply_markup = get_settings_list(check_interval, send_last, api_errors, transaction_info, interface_info, debug)
    msg = await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await state.update_data(settings_message_id=msg.message_id, check_interval=check_interval, send_last=send_last, api_errors=api_errors, transaction_info=transaction_info, interface_info=interface_info, debug=debug)
    await callback.answer()

async def edit_setting_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_setting' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {callback.data}")
    setting_name = callback.data.replace("edit_setting_", "")
    data = await state.get_data()
    current_value = data.get("check_interval", db.get_setting(setting_name) or "10")
    if setting_name == "CHECK_INTERVAL":
        text = f"‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value} —Å–µ–∫—É–Ω–¥\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω. 1):"
        await state.set_state(SettingStates.waiting_for_setting_value)
        await callback.message.edit_text(text, reply_markup=get_interval_edit_keyboard())
    await state.update_data(setting_name=setting_name)
    await callback.answer()

async def toggle_setting(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_setting' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {callback.data}")
    setting_name = callback.data.replace("toggle_", "")
    data = await state.get_data()
    
    # –õ–æ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
    send_last = data.get("send_last", "‚ùå–í–´–ö–õ")
    api_errors = data.get("api_errors", "‚ùå–í–´–ö–õ")
    transaction_info = data.get("transaction_info", "‚úÖ–í–ö–õ")
    interface_info = data.get("interface_info", "‚ùå–í–´–ö–õ")
    debug = data.get("debug", "‚ùå–í–´–ö–õ")
    
    # –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É –ª–æ–∫–∞–ª—å–Ω–æ
    if setting_name == "SEND_LAST_TRANSACTION":
        send_last = "‚úÖ–í–ö–õ" if send_last == "‚ùå–í–´–ö–õ" else "‚ùå–í–´–ö–õ"
        db_value = "1" if send_last == "‚úÖ–í–ö–õ" else "0"
    elif setting_name == "API_ERRORS":
        api_errors = "‚úÖ–í–ö–õ" if api_errors == "‚ùå–í–´–ö–õ" else "‚ùå–í–´–ö–õ"
        db_value = "1" if api_errors == "‚úÖ–í–ö–õ" else "0"
    elif setting_name == "TRANSACTION_INFO":
        transaction_info = "‚úÖ–í–ö–õ" if transaction_info == "‚ùå–í–´–ö–õ" else "‚ùå–í–´–ö–õ"
        db_value = "1" if transaction_info == "‚úÖ–í–ö–õ" else "0"
    elif setting_name == "INTERFACE_INFO":
        interface_info = "‚úÖ–í–ö–õ" if interface_info == "‚ùå–í–´–ö–õ" else "‚ùå–í–´–ö–õ"
        db_value = "1" if interface_info == "‚úÖ–í–ö–õ" else "0"
    elif setting_name == "DEBUG":
        debug = "‚úÖ–í–ö–õ" if debug == "‚ùå–í–´–ö–õ" else "‚ùå–í–´–ö–õ"
        db_value = "1" if debug == "‚úÖ–í–ö–õ" else "0"
    
    # –ó–∞–ø–∏—Å —É –±–∞–∑—É
    db.update_setting(setting_name, db_value)
    await asyncio.sleep(0.5)
    update_log_settings()
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    text, reply_markup = get_settings_list(
        check_interval=data.get("check_interval", "150"),
        send_last=send_last,
        api_errors=api_errors,
        transaction_info=transaction_info,
        interface_info=interface_info,
        debug=debug
    )
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=data.get("settings_message_id"),
        text=text,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    await state.update_data(send_last=send_last, api_errors=api_errors, transaction_info=transaction_info, interface_info=interface_info, debug=debug)
    await callback.answer()

async def process_setting_value(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {message.text}")
    try:
        new_value = message.text
        data = await state.get_data()
        setting_name = data["setting_name"]
        
        if setting_name == "CHECK_INTERVAL":
            new_value = int(new_value)
            if new_value < 1:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã")
            db_value = str(new_value)
            check_interval = f"{new_value} —Å–µ–∫"
        
        # –ó–∞–ø–∏—Å —É –±–∞–∑—É
        db.update_setting(setting_name, db_value)
        await asyncio.sleep(0.5)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        text, reply_markup = get_settings_list(
            check_interval=check_interval,
            send_last=data.get("send_last", "‚ùå–í–´–ö–õ"),
            api_errors=data.get("api_errors", "‚ùå–í–´–ö–õ"),
            transaction_info=data.get("transaction_info", "‚úÖ–í–ö–õ"),
            interface_info=data.get("interface_info", "‚ùå–í–´–ö–õ"),
            debug=data.get("debug", "‚ùå–í–´–ö–õ")
        )
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data.get("settings_message_id"),
            text=text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
        await state.update_data(check_interval=check_interval)
        await state.clear()
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_interval_edit_keyboard())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=get_main_menu())

async def go_home(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'go_home' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback.answer()
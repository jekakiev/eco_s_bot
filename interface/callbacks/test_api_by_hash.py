from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_back_button
from ..states import WalletStates
from database import Database
from utils.logger_config import logger
import aiohttp
from config.settings import ARBISCAN_API_KEY

db = Database()

async def show_test_api_by_hash(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'test_api_by_hash' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç –∞–ø–∏ (–ø–æ —Ö–µ—à—É —Ç—Ä–∞–Ω–∑—ã)' –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):",
        reply_markup=get_back_button()
    )
    await state.set_state(WalletStates.waiting_for_transaction_hash)
    await callback.answer()

async def request_transaction_hash(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–µ—à–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {message.text}")
    transaction_hash = message.text.strip()
    if not transaction_hash.startswith("0x") or len(transaction_hash) != 66:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —Ö–µ—à–∞ (0x + 64 —Å–∏–º–≤–æ–ª–∏)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... (64 —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ 0x).", reply_markup=get_back_button())
        return
    transaction_data = await get_transaction_by_hash(transaction_hash)
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"–û—Ç–≤–µ—Ç API –¥–ª—è —Ö–µ—à–∞ {transaction_hash}: {transaction_data}")
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª—ñ–≤
    chunk_size = 4000
    for i in range(0, len(transaction_data), chunk_size):
        chunk = transaction_data[i:i + chunk_size]
        await message.answer(
            f"üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É {transaction_hash}:\n\n{chunk}",
            disable_web_page_preview=True
        )
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

async def get_transaction_by_hash(transaction_hash):
    api_key = ARBISCAN_API_KEY
    base_url = "https://api.arbiscan.io/api"
    params = {
        "module": "proxy",  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ proxy –¥–ª—è action=tx
        "action": "tx",     # –ó–º—ñ–Ω–µ–Ω–æ –∑ gettxinfo –Ω–∞ tx –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        "txhash": transaction_hash,
        "apikey": api_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                logger.info(f"–ü–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç API: {data}")  # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if data.get("status") == "1" and data.get("result"):
                    return str(data["result"])  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä—ñ JSON-–¥–∞–Ω–∏ —è–∫ —Å—Ç—Ä–æ–∫—É
                else:
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + data.get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}"
# /interface/callbacks/test_api_by_hash.py
from aiogram import types
from aiogram.fsm.context import FSMContext
from ..keyboards import get_main_menu, get_back_button
from ..states import WalletStates
from app_config import db
from utils.logger_config import logger, should_log
import aiohttp
import json
from config.settings import ARBISCAN_API_KEY
from utils.arbiscan import get_token_info

async def show_test_api_by_hash(callback: types.CallbackQuery, state: FSMContext):
    if should_log("interface"):
        logger.info(f"Callback 'test_api_by_hash' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
        logger.info("–ö–Ω–æ–ø–∫–∞ '–¢–µ—Å—Ç –∞–ø–∏ (–ø–æ —Ö–µ—à—É —Ç—Ä–∞–Ω–∑—ã)' –Ω–∞–∂–∞—Ç–∞")
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x...):",
        reply_markup=get_back_button()
    )
    await state.set_state(WalletStates.waiting_for_transaction_hash)
    await callback.answer()

async def request_transaction_hash(message: types.Message, state: FSMContext):
    if should_log("interface"):
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–µ—à–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç {message.from_user.id}: {message.text}")
        logger.info(f"–í–≤–µ–¥–µ–Ω —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {message.text}")
    transaction_hash = message.text.strip()
    if not transaction_hash.startswith("0x") or len(transaction_hash) != 66:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0x... (64 —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ 0x).", reply_markup=get_back_button())
        return
    
    transaction_data = await get_transaction_by_hash(transaction_hash)
    receipt_data = await get_transaction_receipt(transaction_hash)
    
    if should_log("debug"):
        logger.debug(f"–û—Ç–≤–µ—Ç API –¥–ª—è —Ö–µ—à–∞ {transaction_hash} (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è): {transaction_data}")
        logger.debug(f"–û—Ç–≤–µ—Ç API –¥–ª—è —Ö–µ—à–∞ {transaction_hash} (–∫–≤–∏—Ç–∞–Ω—Ü–∏—è): {receipt_data}")
    
    response_text = f"üìä –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É {transaction_hash}:\n\n"
    response_text += "=== –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ===\n"
    response_text += str(transaction_data) + "\n\n"
    
    if not receipt_data.startswith("‚ùå"):
        response_text += "=== –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∏ –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ===\n"
        response_text += str(receipt_data) + "\n\n"
    
    if not receipt_data.startswith("‚ùå"):
        try:
            receipt = json.loads(receipt_data.replace("'", '"'))
            logs = receipt.get("logs", [])
            if logs:
                response_text += "=== –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ —Å—É–º–º—ã –∏–∑ –ª–æ–≥—ñ–≤ ===\n"
                for log in logs:
                    address = log.get("address", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    topics = log.get("topics", [])
                    data = log.get("data", "0x")
                    
                    if topics and topics[0] == "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef":
                        sender = topics[1][26:] if len(topics) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        recipient = topics[2][26:] if len(topics) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        amount_hex = data[2:]
                        try:
                            amount = int(amount_hex, 16)
                            token_info = await get_token_info(address)
                            decimals = int(token_info.get("tokenDecimal", 18))
                            human_readable_amount = amount / (10 ** decimals)
                            response_text += f"Transfer: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {address}\n"
                            response_text += f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n"
                            response_text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n"
                            response_text += f"–°—É–º–º–∞: {human_readable_amount} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è {decimals} –∑–Ω–∞–∫–æ–≤)\n\n"
                        except ValueError as e:
                            if should_log("api_errors"):
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã: {str(e)}")
                            response_text += f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è {address}\n\n"
                    
                    elif topics and topics[0] == "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822":
                        token0 = topics[1][26:] if len(topics) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        token1 = topics[2][26:] if len(topics) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        if len(data) >= 66:
                            amount0_hex = data[2:66]
                            amount1_hex = data[66:130]
                            try:
                                amount0 = int(amount0_hex, 16)
                                amount1 = int(amount1_hex, 16)
                                token0_info = await get_token_info(token0)
                                token1_info = await get_token_info(token1)
                                decimals0 = int(token0_info.get("tokenDecimal", 18))
                                decimals1 = int(token1_info.get("tokenDecimal", 18))
                                human_readable_amount0 = amount0 / (10 ** decimals0)
                                human_readable_amount1 = amount1 / (10 ** decimals1)
                                response_text += f"Swap: –ü—É–ª Uniswap: {address}\n"
                                response_text += f"–¢–æ–∫–µ–Ω 1: {token0}\n"
                                response_text += f"–¢–æ–∫–µ–Ω 2: {token1}\n"
                                response_text += f"–°—É–º–º–∞ —Ç–æ–∫–µ–Ω–∞ 1: {human_readable_amount0} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è {decimals0} –∑–Ω–∞–∫–æ–≤)\n"
                                response_text += f"–°—É–º–º–∞ —Ç–æ–∫–µ–Ω–∞ 2: {human_readable_amount1} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è {decimals1} –∑–Ω–∞–∫–æ–≤)\n\n"
                            except ValueError as e:
                                if should_log("api_errors"):
                                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã —Å–≤–æ–ø–∞: {str(e)}")
                                response_text += f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã —Å–≤–æ–ø–∞ –¥–ª—è {address}\n\n"
        except json.JSONDecodeError as e:
            if should_log("api_errors"):
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –ª–æ–≥–æ–≤: {str(e)}")
            response_text += "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥—ñ–≤.\n\n"
    
    chunk_size = 4000
    for i in range(0, len(response_text), chunk_size):
        chunk = response_text[i:i + chunk_size]
        await message.answer(chunk, disable_web_page_preview=True)
    
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

async def get_transaction_by_hash(transaction_hash):
    api_key = ARBISCAN_API_KEY
    base_url = "https://api.arbiscan.io/api"
    params = {
        "module": "proxy",
        "action": "eth_getTransactionByHash",
        "txhash": transaction_hash,
        "apikey": api_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if should_log("debug"):
                    logger.debug(f"–ü–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç API (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è): {data}")
                if data.get("result"):
                    return str(data["result"])
                else:
                    if should_log("api_errors"):
                        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ')}")
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + data.get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
            else:
                if should_log("api_errors"):
                    logger.error(f"–û—à–∏–±–∫–∞ API Arbiscan: HTTP {response.status}")
                return f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}"

async def get_transaction_receipt(transaction_hash):
    api_key = ARBISCAN_API_KEY
    base_url = "https://api.arbiscan.io/api"
    params = {
        "module": "proxy",
        "action": "eth_getTransactionReceipt",
        "txhash": transaction_hash,
        "apikey": api_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if should_log("debug"):
                    logger.debug(f"–ü–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç API (–∫–≤–∏—Ç–∞–Ω—Ü–∏—è): {data}")
                if data.get("result"):
                    return str(data["result"])
                else:
                    if should_log("api_errors"):
                        logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ')}")
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + data.get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
            else:
                if should_log("api_errors"):
                    logger.error(f"–û—à–∏–±–∫–∞ API Arbiscan: HTTP {response.status}")
                return f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}"
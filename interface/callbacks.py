from aiogram import types
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_main_menu, get_back_button, get_tokens_keyboard, get_wallet_control_keyboard,
    get_wallets_list, get_tracked_tokens_list, get_token_control_keyboard,
    get_token_name_confirmation_keyboard, get_thread_confirmation_keyboard, get_commands_list,
    get_settings_list, get_interval_edit_keyboard
)
from .states import WalletStates, TokenStates, SettingStates
from database import Database
from utils.logger_config import logger, update_log_settings
import aiohttp
import time
import asyncio
from config.settings import ARBISCAN_API_KEY
from config.bot_instance import bot

db = Database()

async def show_wallets(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_wallets' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    try:
        text, reply_markup = get_wallets_list()
        await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)
        await callback.answer()
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_back_button())
        await callback.answer()

async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' –Ω–∞–∂–∞—Ç–∞")
    await state.set_state(WalletStates.waiting_for_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_wallet_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    await state.update_data(wallet_address=message.text)
    await state.set_state(WalletStates.waiting_for_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

async def process_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletStates.waiting_for_tokens)
    await state.update_data(selected_tokens=[])
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([], is_edit=False))

async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞: {token}")
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    is_edit = "wallet_id" in data
    await callback.message.edit_reply_markup(reply_markup=get_tokens_keyboard(selected_tokens, is_edit=is_edit))
    await callback.answer()

async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
    await callback.answer()

async def save_tokens(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'save_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞")
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.update_wallet_tokens(wallet_id, ",".join(selected_tokens))
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))
    await callback.answer()

async def delete_wallet(callback: types.CallbackQuery):
    logger.info(f"Callback 'delete_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª—ë–Ω!", reply_markup=get_main_menu())
    await callback.answer()

async def rename_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'rename_wallet' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    await state.update_data(wallet_id=wallet_id)
    await state.set_state(WalletStates.waiting_for_new_name)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_new_wallet_name(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: {message.text}")
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    new_name = message.text
    db.update_wallet_name(wallet_id, new_name)
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –ò–º—è –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await message.answer(text, reply_markup=get_wallet_control_keyboard(wallet_id))

async def edit_tokens_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    wallet_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å ID {wallet_id}")
    wallet = db.get_wallet_by_id(wallet_id)
    current_tokens = wallet["tokens"].split(",") if wallet["tokens"] else []
    await state.update_data(wallet_id=wallet_id, selected_tokens=current_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(current_tokens, is_edit=True))
    await callback.answer()

async def show_tokens(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_tokens' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)
    await callback.answer()

async def add_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'add_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω' –Ω–∞–∂–∞—Ç–∞")
    await state.set_state(TokenStates.waiting_for_contract_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞:", reply_markup=get_back_button())
    await callback.answer()

async def process_contract_address(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞: {message.text}")
    contract_address = message.text.lower()
    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "offset": 0,
        "limit": 10,
        "apikey": ARBISCAN_API_KEY
    }
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.arbiscan.io/api", params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data.get("status") == "1":
                    token_info = data["result"][0]
                    token_name = token_info.get("tokenName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    await state.update_data(contract_address=contract_address, token_name=token_name)
                    await state.set_state(TokenStates.waiting_for_name_confirmation)
                    await message.answer(f"ü™ô –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: *{token_name}*. –í—Å—ë –≤–µ—Ä–Ω–æ?", parse_mode="Markdown", reply_markup=get_token_name_confirmation_keyboard())
                else:
                    if int(db.get_setting("API_ERRORS") or 1):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {contract_address}: {data.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_button())
            else:
                if int(db.get_setting("API_ERRORS") or 1):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {contract_address}: HTTP {response.status}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_button())

async def confirm_token_name(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'confirm_token_name' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    await state.set_state(TokenStates.waiting_for_thread_confirmation)
    await callback.message.edit_text("üßµ –°–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –≤–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞?", reply_markup=get_thread_confirmation_keyboard())
    await callback.answer()

async def reject_token_name(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'reject_token_name' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÇ –û–π, –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–ª–æ–¥–µ—Ü.\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def thread_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞")
    await state.set_state(TokenStates.waiting_for_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )
    await callback.answer()

async def thread_not_exists(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'thread_not_exists' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–£–∫–∞–∑–∞–Ω–∏–µ, —á—Ç–æ —Ç—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÖ –í–µ—Ç–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞? –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–æ–∑–¥–∞–π –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def process_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Ç—Ä–µ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω ID —Ç—Ä–µ–¥–∞: {message.text}")
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        db.add_tracked_token(data["token_name"], data["contract_address"], thread_id)
        if int(db.get_setting("INTERFACE_INFO") or 0):
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω: {data['token_name']} ({data['contract_address']}) —Å —Ç—Ä–µ–¥–æ–º {thread_id}")
        text, reply_markup = get_tracked_tokens_list()
        await state.clear()
        await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n_________\n{text}", reply_markup=reply_markup)
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.", reply_markup=get_back_button())

async def edit_token_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    token = db.get_tracked_token_by_id(token_id)
    text = f"–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
    await callback.message.edit_text(text, reply_markup=get_token_control_keyboard(token_id))
    await callback.answer()

async def edit_token_thread(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_token_thread' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_edit_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )
    await callback.answer()

async def process_edit_thread_id(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º ID —Ç—Ä–µ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞: {message.text}")
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        token_id = data["token_id"]
        token = db.get_tracked_token_by_id(token_id)
        db.update_tracked_token(token_id, token["token_name"], thread_id)
        text = f"‚úÖ –¢—Ä–µ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!\n_________\n–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
        await state.clear()
        await message.answer(text, reply_markup=get_token_control_keyboard(token_id))
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–¥–∞.", reply_markup=get_back_button())

async def delete_token(callback: types.CallbackQuery):
    logger.info(f"Callback 'delete_token' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    token_id = callback.data.split("_")[2]
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å ID {token_id}")
    db.remove_tracked_token(token_id)
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.edit_text(f"üóë –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω!\n_________\n{text}", reply_markup=reply_markup)
    await callback.answer()

async def show_commands(callback: types.CallbackQuery):
    logger.info(f"Callback 'show_commands' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_commands_list()
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=reply_markup)
    await callback.answer()

async def show_settings(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'show_settings' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_settings_list()
    msg = await callback.message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    await state.update_data(settings_message_id=msg.message_id)
    await callback.answer()

async def edit_setting_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'edit_setting' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {callback.data}")
    setting_name = callback.data.replace("edit_setting_", "")
    current_value = db.get_setting(setting_name)
    if current_value is None:
        default_values = {
            "CHECK_INTERVAL": "10",
            "SEND_LAST_TRANSACTION": "0",
            "API_ERRORS": "1",
            "TRANSACTION_INFO": "0",
            "INTERFACE_INFO": "0",
            "DEBUG": "0"
        }
        current_value = default_values.get(setting_name, "0")
        if int(db.get_setting("API_ERRORS") or 1):
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_value}")
        db.update_setting(setting_name, current_value)

    if setting_name == "CHECK_INTERVAL":
        text = f"‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value} —Å–µ–∫—É–Ω–¥\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω. 1):"
        await state.set_state(SettingStates.waiting_for_setting_value)
        await callback.message.edit_text(text, reply_markup=get_interval_edit_keyboard())
    await state.update_data(setting_name=setting_name)
    await callback.answer()

async def toggle_setting(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'toggle_setting' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}: {callback.data}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {callback.data}")
    setting_name = callback.data.replace("toggle_", "")
    current_value = db.get_setting(setting_name)
    if current_value is None:
        current_value = "0"
        db.update_setting(setting_name, current_value)
        if int(db.get_setting("API_ERRORS") or 1):
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_value}")
    
    new_value = "1" if int(current_value) == 0 else "0"
    db.update_setting(setting_name, new_value)
    await asyncio.sleep(0.5)
    update_log_settings()
    text, reply_markup = get_settings_list()
    updated_value = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value == "1" else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    new_text = f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {setting_name} —Ç–µ–ø–µ—Ä—å {updated_value}\n_____________________\n{text}"
    data = await state.get_data()
    settings_message_id = data.get("settings_message_id")
    try:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=settings_message_id,
            text=new_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        msg = await callback.message.answer(new_text, reply_markup=reply_markup, disable_web_page_preview=True)
        await state.update_data(settings_message_id=msg.message_id)
    await callback.answer()

async def process_setting_value(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç {message.from_user.id}: {message.text}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {message.text}")
    try:
        new_value = message.text
        data = await state.get_data()
        setting_name = data["setting_name"]
        
        if setting_name == "CHECK_INTERVAL":
            new_value = int(new_value)
            if new_value < 1:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã")
        
        db.update_setting(setting_name, str(new_value))
        await asyncio.sleep(0.5)
        updated_value = db.get_setting(setting_name)
        text, reply_markup = get_settings_list()
        settings_message_id = data.get("settings_message_id")
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=settings_message_id,
                text=f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {setting_name} —Ç–µ–ø–µ—Ä—å {updated_value} —Å–µ–∫\n_____________________\n{text}",
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            msg = await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {setting_name} —Ç–µ–ø–µ—Ä—å {updated_value} —Å–µ–∫\n_____________________\n{text}",
                                       reply_markup=reply_markup, disable_web_page_preview=True)
            await state.update_data(settings_message_id=msg.message_id)
        await state.clear()
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_interval_edit_keyboard())
    except Exception as e:
        if int(db.get_setting("API_ERRORS") or 1):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=get_back_button())

async def go_home(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback 'go_home' –ø–æ–ª—É—á–µ–Ω –æ—Ç {callback.from_user.id}")
    if int(db.get_setting("INTERFACE_INFO") or 0):
        logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback.answer()
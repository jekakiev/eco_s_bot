from aiogram import types
from aiogram.fsm.context import FSMContext
from .keyboards import (
    get_main_menu, get_back_button, get_tokens_keyboard, get_wallet_control_keyboard,
    get_wallets_list, get_tracked_tokens_list, get_token_control_keyboard,
    get_token_name_confirmation_keyboard, get_thread_confirmation_keyboard, get_commands_list,
    get_settings_list, get_interval_edit_keyboard, get_log_edit_keyboard
)
from .states import WalletStates, TokenStates, SettingStates
from database import Database
from logger_config import logger
import requests
from settings import ARBISCAN_API_KEY

db = Database()

# === –ü–û–ö–ê–ó–ê–¢–¨ –ö–û–®–ï–õ–¨–ö–ò ===
async def show_wallets(callback: types.CallbackQuery):
    logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    try:
        text, reply_markup = get_wallets_list()
        await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=get_back_button())

# === –î–û–ë–ê–í–ò–¢–¨ –ö–û–®–ï–õ–ï–ö: –ù–ê–ß–ê–õ–û ===
async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletStates.waiting_for_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

# === –í–í–û–î –ê–î–†–ï–°–ê ===
async def process_wallet_address(message: types.Message, state: FSMContext):
    await state.update_data(wallet_address=message.text)
    await state.set_state(WalletStates.waiting_for_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

# === –í–í–û–î –ò–ú–ï–ù–ò ===
async def process_wallet_name(message: types.Message, state: FSMContext):
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletStates.waiting_for_tokens)
    await state.update_data(selected_tokens=[])
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([], is_edit=False))

# === –í–´–ë–û–† –¢–û–ö–ï–ù–û–í ===
async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    token = callback.data.split("_")[2]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    is_edit = "wallet_id" in data
    await callback.message.edit_reply_markup(reply_markup=get_tokens_keyboard(selected_tokens, is_edit=is_edit))

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê –¢–û–ö–ï–ù–û–í –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò ===
async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í –ü–†–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ò ===
async def save_tokens(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã!", show_alert=True)
        return

    db.update_wallet_tokens(wallet_id, ",".join(selected_tokens))
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await callback.message.edit_text(text, reply_markup=get_wallet_control_keyboard(wallet_id))

# === –£–î–ê–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê ===
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª—ë–Ω!", reply_markup=get_main_menu())

# === –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê ===
async def rename_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    wallet_id = callback.data.split("_")[2]
    await state.update_data(wallet_id=wallet_id)
    await state.set_state(WalletStates.waiting_for_new_name)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

async def process_new_wallet_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    wallet_id = data.get("wallet_id")
    new_name = message.text
    db.update_wallet_name(wallet_id, new_name)
    wallet = db.get_wallet_by_id(wallet_id)
    text = f"‚úÖ –ò–º—è –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}\n_________\n–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await state.clear()
    await message.answer(text, reply_markup=get_wallet_control_keyboard(wallet_id))

# === –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í ===
async def edit_tokens_start(callback: types.CallbackQuery, state: FSMContext):
    wallet_id = callback.data.split("_")[2]
    wallet = db.get_wallet_by_id(wallet_id)
    current_tokens = wallet["tokens"].split(",") if wallet["tokens"] else []
    await state.update_data(wallet_id=wallet_id, selected_tokens=current_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(current_tokens, is_edit=True))

# === –ü–û–ö–ê–ó–ê–¢–¨ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –¢–û–ö–ï–ù–´ ===
async def show_tokens(callback: types.CallbackQuery):
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)

# === –î–û–ë–ê–í–ò–¢–¨ –¢–û–ö–ï–ù: –ù–ê–ß–ê–õ–û ===
async def add_token_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TokenStates.waiting_for_contract_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞:", reply_markup=get_back_button())

# === –í–í–û–î –ê–î–†–ï–°–ê –¢–û–ö–ï–ù–ê ===
async def process_contract_address(message: types.Message, state: FSMContext):
    contract_address = message.text.lower()
    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "apikey": ARBISCAN_API_KEY
    }
    response = requests.get("https://api.arbiscan.io/api", params=params)
    if response.status_code == 200 and response.json().get("status") == "1":
        token_info = response.json()["result"][0]
        token_name = token_info.get("tokenName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        await state.update_data(contract_address=contract_address, token_name=token_name)
        await state.set_state(TokenStates.waiting_for_name_confirmation)
        await message.answer(f"ü™ô –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: *{token_name}*. –í—Å—ë –≤–µ—Ä–Ω–æ?", parse_mode="Markdown", reply_markup=get_token_name_confirmation_keyboard())
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {contract_address}: {response.status_code}, {response.text}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_button())

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê ===
async def confirm_token_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TokenStates.waiting_for_thread_confirmation)
    await callback.message.edit_text("üßµ –°–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –≤–µ—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞?", reply_markup=get_thread_confirmation_keyboard())

async def reject_token_name(callback: types.CallbackQuery, state: FSMContext):
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÇ –û–π, –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–ª–æ–¥–µ—Ü.\n_________\n{text}", reply_markup=reply_markup)

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –¢–†–ï–î–ê ===
async def thread_exists(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TokenStates.waiting_for_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )

async def thread_not_exists(callback: types.CallbackQuery, state: FSMContext):
    text, reply_markup = get_tracked_tokens_list()
    await state.clear()
    await callback.message.edit_text(f"üòÖ –í–µ—Ç–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞? –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–æ–∑–¥–∞–π –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!\n_________\n{text}", reply_markup=reply_markup)

# === –í–í–û–î ID –¢–†–ï–î–ê ===
async def process_thread_id(message: types.Message, state: FSMContext):
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        db.add_tracked_token(data["token_name"], data["contract_address"], thread_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω: {data['token_name']} ({data['contract_address']}) —Å —Ç—Ä–µ–¥–æ–º {thread_id}")
        text, reply_markup = get_tracked_tokens_list()
        await state.clear()
        await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n_________\n{text}", reply_markup=reply_markup)
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.", reply_markup=get_back_button())

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–ê ===
async def edit_token_start(callback: types.CallbackQuery, state: FSMContext):
    token_id = callback.data.split("_")[2]
    token = db.get_tracked_token_by_id(token_id)
    text = f"–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
    await callback.message.edit_text(text, reply_markup=get_token_control_keyboard(token_id))

async def edit_token_thread(callback: types.CallbackQuery, state: FSMContext):
    token_id = callback.data.split("_")[2]
    await state.update_data(token_id=token_id)
    await state.set_state(TokenStates.waiting_for_edit_thread_id)
    await callback.message.edit_text(
        "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —Ç—Ä–µ–¥–∞:\nüí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_thread_id` –ø—Ä—è–º–æ –≤ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–¥.",
        parse_mode="Markdown",
        reply_markup=get_back_button()
    )

async def process_edit_thread_id(message: types.Message, state: FSMContext):
    try:
        thread_id = int(message.text)
        data = await state.get_data()
        token_id = data["token_id"]
        token = db.get_tracked_token_by_id(token_id)
        db.update_tracked_token(token_id, token["token_name"], thread_id)
        text = f"‚úÖ –¢—Ä–µ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!\n_________\n–¢–æ–∫–µ–Ω: {token['token_name']}\n–ê–¥—Ä–µ—Å: {token['contract_address']}\n–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–¥: {token['thread_id']}"
        await state.clear()
        await message.answer(text, reply_markup=get_token_control_keyboard(token_id))
    except ValueError:
        await message.answer("‚ùå ID —Ç—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_back_button())

# === –£–î–ê–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê ===
async def delete_token(callback: types.CallbackQuery):
    token_id = callback.data.split("_")[2]
    db.remove_tracked_token(token_id)
    text, reply_markup = get_tracked_tokens_list()
    await callback.message.edit_text(f"üóë –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω!\n_________\n{text}", reply_markup=reply_markup)

# === –ü–û–ö–ê–ó–ê–¢–¨ –ö–û–ú–ê–ù–î–´ ===
async def show_commands(callback: types.CallbackQuery):
    text, reply_markup = get_commands_list()
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=reply_markup)

# === –ü–û–ö–ê–ó–ê–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò ===
async def show_settings(callback: types.CallbackQuery):
    logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞–∂–∞—Ç–∞")
    text, reply_markup = get_settings_list()
    await callback.message.answer(text, disable_web_page_preview=True, reply_markup=reply_markup)

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
async def edit_setting_start(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {callback.data}")
    setting_name = callback.data.split("_")[2]
    current_value = db.get_setting(setting_name)
    if current_value is None:
        # Fallback –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        default_values = {
            "CHECK_INTERVAL": "10",
            "LOG_TRANSACTIONS": "0",
            "LOG_SUCCESSFUL_TRANSACTIONS": "0"
        }
        current_value = default_values.get(setting_name, "0")
        logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_value}")
        db.update_setting(setting_name, current_value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É

    if setting_name == "CHECK_INTERVAL":
        text = f"‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value} —Å–µ–∫—É–Ω–¥\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω. 5):"
        await state.set_state(SettingStates.waiting_for_setting_value)
        await callback.message.edit_text(text, reply_markup=get_interval_edit_keyboard())
    else:  # LOG_TRANSACTIONS –∏–ª–∏ LOG_SUCCESSFUL_TRANSACTIONS
        text = f"‚öôÔ∏è {setting_name.replace('_', ' ').title()}\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {'–í–∫–ª' if int(current_value) else '–í—ã–∫–ª'}"
        await callback.message.edit_text(text, reply_markup=get_log_edit_keyboard(setting_name))
    await state.update_data(setting_name=setting_name)

async def process_setting_value(message: types.Message, state: FSMContext):
    logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {message.text}")
    try:
        new_value = message.text
        data = await state.get_data()
        setting_name = data["setting_name"]
        
        if setting_name == "CHECK_INTERVAL":
            new_value = int(new_value)
            if new_value < 5:
                raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥")
        
        db.update_setting(setting_name, str(new_value))
        text, reply_markup = get_settings_list()
        await state.clear()
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_value}\n_________\n{text}", reply_markup=reply_markup)
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_interval_edit_keyboard())

# === –£–°–¢–ê–ù–û–í–ö–ê –ó–ù–ê–ß–ï–ù–ò–Ø –õ–û–ì–û–í ===
async def set_log_value(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–∫–ª/–≤—ã–∫–ª –ª–æ–≥–æ–≤: {callback.data}")
    parts = callback.data.split("_")
    setting_name = parts[1]
    value = parts[2]
    db.update_setting(setting_name, value)
    text, reply_markup = get_settings_list()
    await callback.message.edit_text(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {'–í–∫–ª' if value == '1' else '–í—ã–∫–ª'}\n_________\n{text}", reply_markup=reply_markup)

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
async def go_home(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
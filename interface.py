from aiogram import types, Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from database import Database
from threads_config import TOKEN_CONFIG

db = Database()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏", callback_data="show_wallets")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")
    return builder.as_markup()

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ (–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏)
def get_wallets_list():
    wallets = db.get_all_wallets()
    if not wallets:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤."

    text = "üìú –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n"
    for wallet in wallets:
        text += f"üîπ [{wallet['name'] or wallet['address'][:6] + '...'}](https://arbiscan.io/address/{wallet['address']})\n"

    return text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º
def get_wallet_control_keyboard(wallet_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_wallet_{wallet_id}")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data=f"edit_tokens_{wallet_id}")
    builder.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_wallet_{wallet_id}")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    return builder.as_markup()

# –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
def get_tokens_keyboard(selected_tokens):
    builder = InlineKeyboardBuilder()
    
    for token_name, config in TOKEN_CONFIG.items():
        is_selected = "‚úÖ " if token_name in selected_tokens else ""
        builder.button(text=f"{is_selected}{token_name}", callback_data=f"toggle_token_{token_name}")

    builder.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_tokens")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wallets
async def wallets_command(message: types.Message):
    await message.answer(get_wallets_list(), parse_mode="Markdown", disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏"
async def show_wallets(callback: types.CallbackQuery):
    await callback.message.edit_text(get_wallets_list(), parse_mode="Markdown", disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"
async def add_wallet_start(callback: types.CallbackQuery, state: Dispatcher):
    await state.set_state("add_wallet_address")
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")

# –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
async def process_wallet_address(message: types.Message, state: Dispatcher):
    await state.update_data(wallet_address=message.text)
    await state.set_state("add_wallet_name")
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:")

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def process_wallet_name(message: types.Message, state: Dispatcher):
    await state.update_data(wallet_name=message.text)
    await state.set_state("add_wallet_tokens")
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([]))

# –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
async def toggle_token(callback: types.CallbackQuery, state: Dispatcher):
    token = callback.data.split("_")[1]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(selected_tokens))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def confirm_tokens(callback: types.CallbackQuery, state: Dispatcher):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def go_home(callback: types.CallbackQuery):
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(wallets_command, Command("wallets"))
    dp.callback_query.register(show_wallets, lambda c: c.data == "show_wallets")
    dp.callback_query.register(add_wallet_start, lambda c: c.data == "add_wallet")
    dp.message.register(process_wallet_address, lambda message, state: state.get_state() == "add_wallet_address")
    dp.message.register(process_wallet_name, lambda message, state: state.get_state() == "add_wallet_name")
    dp.callback_query.register(toggle_token, lambda c: c.data.startswith("toggle_token_"))
    dp.callback_query.register(confirm_tokens, lambda c: c.data == "confirm_tokens")
    dp.callback_query.register(delete_wallet, lambda c: c.data.startswith("delete_wallet_"))
    dp.callback_query.register(go_home, lambda c: c.data == "home")

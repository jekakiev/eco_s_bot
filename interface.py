from aiogram import types, Dispatcher, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from database import Database
from threads_config import TOKEN_CONFIG

db = Database()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìú –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ", callback_data="show_wallets")
    builder.button(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å", callback_data="add_wallet")
    return builder.as_markup()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def get_back_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    return builder.as_markup()

# –°–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ (–≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏)
def get_wallets_list():
    wallets = db.get_all_wallets()
    if not wallets:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤."

    text = "üìú *–í–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ:*\n\n"
    for wallet in wallets:
        text += f"üîπ [{wallet['name'] or wallet['address'][:6] + '...'}](https://arbiscan.io/address/{wallet['address']})\n"

    return text

# –ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü–µ–º
def get_wallet_control_keyboard(wallet_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_wallet_{wallet_id}")
    builder.button(text="üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏", callback_data=f"edit_tokens_{wallet_id}")
    builder.button(text="‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏", callback_data=f"rename_wallet_{wallet_id}")
    builder.button(text="‚¨ÖÔ∏è –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    return builder.as_markup()

# –í–∏–±—ñ—Ä —Ç–æ–∫–µ–Ω—ñ–≤ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
def get_tokens_keyboard(selected_tokens):
    builder = InlineKeyboardBuilder()
    
    for token_name, config in TOKEN_CONFIG.items():
        is_selected = "‚úÖ " if token_name in selected_tokens else ""
        builder.button(text=f"{is_selected}{token_name}", callback_data=f"toggle_token_{token_name}")

    builder.adjust(2)  # –î–≤—ñ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.button(text="‚úÖ –î–æ–¥–∞—Ç–∏", callback_data="confirm_tokens")
    builder.button(text="‚¨ÖÔ∏è –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    
    return builder.as_markup()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /wallets
async def wallets_command(message: types.Message):
    await message.answer(get_wallets_list(), parse_mode="Markdown", disable_web_page_preview=True, reply_markup=get_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ"
async def show_wallets(callback: types.CallbackQuery):
    await callback.message.edit_text(get_wallets_list(), parse_mode="Markdown", disable_web_page_preview=True, reply_markup=get_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å"
async def add_wallet_start(callback: types.CallbackQuery, state: Dispatcher):
    await state.set_state("add_wallet_address")
    await callback.message.edit_text("üìù –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è:", reply_markup=get_back_button())

# –í–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
async def process_wallet_address(message: types.Message, state: Dispatcher):
    await state.update_data(wallet_address=message.text)
    await state.set_state("add_wallet_name")
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥–∞–º–∞–Ω—Ü—è:", reply_markup=get_back_button())

# –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
async def process_wallet_name(message: types.Message, state: Dispatcher):
    await state.update_data(wallet_name=message.text)
    await state.set_state("add_wallet_tokens")
    await message.answer("ü™ô –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è:", reply_markup=get_tokens_keyboard([]))

# –í–∏–±—ñ—Ä —Ç–æ–∫–µ–Ω—ñ–≤
async def toggle_token(callback: types.CallbackQuery, state: Dispatcher):
    token = callback.data.split("_")[1]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    await callback.message.edit_text("ü™ô –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–Ω–µ—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è:", reply_markup=get_tokens_keyboard(selected_tokens))

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ç–æ–∫–µ–Ω—ñ–≤
async def confirm_tokens(callback: types.CallbackQuery, state: Dispatcher):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å –¥–æ–¥–∞–Ω–æ!", reply_markup=get_main_menu())

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ì–∞–º–∞–Ω–µ—Ü—å –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ "–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
async def go_home(callback: types.CallbackQuery):
    await callback.message.edit_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(wallets_command, Command("wallets"))
    dp.callback_query.register(show_wallets, F.data == "show_wallets")
    dp.callback_query.register(add_wallet_start, F.data == "add_wallet")
    dp.message.register(process_wallet_address, F.state == "add_wallet_address")
    dp.message.register(process_wallet_name, F.state == "add_wallet_name")
    dp.callback_query.register(toggle_token, F.data.startswith("toggle_token_"))
    dp.callback_query.register(confirm_tokens, F.data == "confirm_tokens")
    dp.callback_query.register(delete_wallet, F.data.startswith("delete_wallet_"))
    dp.callback_query.register(go_home, F.data == "home")

import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from database import Database
from threads_config import TOKEN_CONFIG

db = Database()

# === –°–¢–ê–ù–´ –î–õ–Ø FSM ===
class AddWalletState(StatesGroup):
    address = State()
    name = State()
    tokens = State()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="wallets_menu")
    return builder.as_markup()

# === –ö–ù–û–ü–ö–ò –°–ü–ò–°–ö–ê –ö–û–®–ï–õ–¨–ö–û–í ===
def get_wallets_keyboard():
    builder = InlineKeyboardBuilder()
    wallets = db.get_all_wallets()
    
    for wallet in wallets:
        builder.button(text=wallet["name"], callback_data=f"wallet_{wallet['id']}")  # wallet_id
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    
    return builder.as_markup()

# === –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–û–ú ===
def get_wallet_control_keyboard(wallet_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_wallet_{wallet_id}")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data=f"edit_tokens_{wallet_id}")
    builder.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_wallet_{wallet_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ—à–µ–ª—å–∫–æ–≤", callback_data="wallets_menu")
    
    return builder.as_markup()

# === –ö–ù–û–ü–ö–ò –í–´–ë–û–†–ê –¢–û–ö–ï–ù–û–í ===
def get_tokens_keyboard(selected_tokens):
    builder = InlineKeyboardBuilder()
    
    for token_name, config in TOKEN_CONFIG.items():
        is_selected = "‚úÖ " if token_name in selected_tokens else ""
        builder.button(text=f"{is_selected}{token_name}", callback_data=f"toggle_token_{token_name}")

    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_tokens")
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    
    return builder.as_markup()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
async def start_command(message: types.Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# === –û–¢–ö–†–´–¢–¨ –ú–ï–ù–Æ –ö–û–®–ï–õ–¨–ö–û–í ===
async def wallets_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("üìú –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:", reply_markup=get_wallets_keyboard())

# === –û–¢–ö–†–´–¢–¨ –ú–ï–ù–Æ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê ===
async def wallet_callback(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[1]
    await callback.message.edit_text(f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º:", reply_markup=get_wallet_control_keyboard(wallet_id))

# === –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–ê ===
async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddWalletState.address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")

# === –í–í–û–î –ê–î–†–ï–°–ê –ö–û–®–ï–õ–¨–ö–ê ===
async def process_wallet_address(message: types.Message, state: FSMContext):
    await state.update_data(wallet_address=message.text)
    await state.set_state(AddWalletState.name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:")

# === –í–í–û–î –ò–ú–ï–ù–ò –ö–û–®–ï–õ–¨–ö–ê ===
async def process_wallet_name(message: types.Message, state: FSMContext):
    await state.update_data(wallet_name=message.text)
    await state.set_state(AddWalletState.tokens)
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([]))

# === –í–´–ë–û–† –¢–û–ö–ï–ù–û–í ===
async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    token = callback.data.split("_")[1]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(selected_tokens))

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê –¢–û–ö–ï–ù–û–í ===
async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_wallets_keyboard())

# === –£–î–ê–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê ===
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!", reply_markup=get_wallets_keyboard())

# === –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
async def go_home(callback: types.CallbackQuery):
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ===
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.callback_query.register(wallets_menu, F.data == "wallets_menu")
    dp.callback_query.register(wallet_callback, F.data.startswith("wallet_"))
    dp.callback_query.register(add_wallet_start, F.data == "add_wallet")
    dp.message.register(process_wallet_address, StateFilter(AddWalletState.address))
    dp.message.register(process_wallet_name, StateFilter(AddWalletState.name))
    dp.callback_query.register(toggle_token, F.data.startswith("toggle_token_"))
    dp.callback_query.register(confirm_tokens, F.data == "confirm_tokens")
    dp.callback_query.register(delete_wallet, F.data.startswith("delete_wallet_"))
    dp.callback_query.register(go_home, F.data == "home")

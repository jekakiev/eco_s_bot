from aiogram import types, Dispatcher, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import Database
from threads_config import TOKEN_CONFIG

db = Database()

# === –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–ê ===
class WalletStates(StatesGroup):
    waiting_for_address = State()
    waiting_for_name = State()
    waiting_for_tokens = State()

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏", callback_data="show_wallets")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")
    return builder.as_markup()

# === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
def get_back_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    return builder.as_markup()

# === –°–ü–ò–°–û–ö –ö–û–®–ï–õ–¨–ö–û–í ===
def get_wallets_list():
    wallets = db.get_all_wallets()
    if not wallets:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤."

    text = "üìú *–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:*\n\n"
    for wallet in wallets:
        text += f"üîπ [{wallet['name'] or wallet['address'][:6] + '...'}](https://arbiscan.io/address/{wallet['address']})\n"

    return text

# === –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–û–ú ===
def get_wallet_control_keyboard(wallet_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_wallet_{wallet_id}")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data=f"edit_tokens_{wallet_id}")
    builder.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_wallet_{wallet_id}")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    return builder.as_markup()

# === –í–´–ë–û–† –¢–û–ö–ï–ù–û–í (2 –ö–ù–û–ü–ö–ò –í –†–Ø–î, ‚úÖ –†–ê–ë–û–¢–ê–ï–¢) ===
def get_tokens_keyboard(selected_tokens):
    builder = InlineKeyboardBuilder()

    for token_name in TOKEN_CONFIG:
        is_selected = "‚úÖ " if token_name in selected_tokens else ""
        builder.button(text=f"{is_selected}{token_name}", callback_data=f"toggle_token_{token_name}")

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)

    # –í–Ω–∏–∑—É –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥" –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_tokens")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
    builder.adjust(2)  # –ß—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ–∂–µ –±—ã–ª–∏ –≤ —Ä—è–¥

    return builder.as_markup()

# === –ü–û–ö–ê–ó–ê–¢–¨ –ö–û–®–ï–õ–¨–ö–ò ===
async def show_wallets(callback: types.CallbackQuery):
    await callback.message.edit_text(get_wallets_list(), parse_mode="Markdown", disable_web_page_preview=True, reply_markup=get_main_menu())

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê: –ù–ê–ß–ê–õ–û ===
async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletStates.waiting_for_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

# === –í–í–û–î –ê–î–†–ï–°–ê ===
async def process_wallet_address(message: types.Message, state: FSMContext):
    await state.update_data(wallet_address=message.text)
    await state.set_state(WalletStates.waiting_for_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_back_button())

# === –í–í–û–î –ò–ú–ï–ù–ò ===
async def process_wallet_name(message: types.Message, state: FSMContext):
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletStates.waiting_for_tokens)
    await state.update_data(selected_tokens=[])  # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([]))

# === –í–´–ë–û–† –¢–û–ö–ï–ù–û–í (‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç) ===
async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    token = callback.data.split("_")[2]  # Correct the index to [2]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    await callback.message.edit_reply_markup(reply_markup=get_tokens_keyboard(selected_tokens))

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê –¢–û–ö–ï–ù–û–í ===
async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())

# === –£–î–ê–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê ===
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu())

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
async def go_home(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_wallets, F.data == "show_wallets")
    dp.callback_query.register(add_wallet_start, F.data == "add_wallet")
    dp.message.register(process_wallet_address, WalletStates.waiting_for_address)
    dp.message.register(process_wallet_name, WalletStates.waiting_for_name)
    dp.callback_query.register(toggle_token, F.data.startswith("toggle_token_"))
    dp.callback_query.register(confirm_tokens, F.data == "confirm_tokens")
    dp.callback_query.register(delete_wallet, F.data.startswith("delete_wallet_"))
    dp.callback_query.register(go_home, F.data == "home")

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import Database
from threads_config import TOKEN_CONFIG

db = Database()


# ==== –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ ====
class WalletState(StatesGroup):
    waiting_for_address = State()
    waiting_for_name = State()
    waiting_for_tokens = State()


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ====
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏", callback_data="show_wallets")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="add_wallet")
    return builder.as_markup()


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ ====
async def show_wallets(callback: types.CallbackQuery):
    wallets = db.get_all_wallets()
    if not wallets:
        await callback.message.edit_text("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.", reply_markup=get_main_menu())
        return

    text = "üìú <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:</b>\n\n"
    for wallet in wallets:
        text += f"üîπ <a href='https://arbiscan.io/address/{wallet['address']}'>{wallet['name']}</a>\n"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚¨áÔ∏è"
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_wallets_keyboard(wallets))


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º ====
def get_wallets_keyboard(wallets):
    builder = InlineKeyboardBuilder()
    for wallet in wallets:
        builder.button(text=f"‚öôÔ∏è {wallet['name']}", callback_data=f"wallet_{wallet['id']}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")
    return builder.as_markup()


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º ====
async def wallet_control(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[1]
    wallet = db.get_wallet_by_id(wallet_id)

    if not wallet:
        await callback.message.edit_text("‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_menu())
        return

    text = f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º</b>\n\n"
    text += f"üìç <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {wallet['name']}\n"
    text += f"üí≥ <b>–ê–¥—Ä–µ—Å:</b> <a href='https://arbiscan.io/address/{wallet['address']}'>{wallet['address']}</a>\n"
    text += f"ü™ô <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:</b> {wallet['tokens'] if wallet['tokens'] else '–ù–µ—Ç'}\n"

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_wallet_control_keyboard(wallet_id))


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º ====
def get_wallet_control_keyboard(wallet_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_wallet_{wallet_id}")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data=f"edit_tokens_{wallet_id}")
    builder.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_wallet_{wallet_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_wallets")
    return builder.as_markup()


# ==== –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ ====
async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletState.waiting_for_address)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_cancel_keyboard())


# ==== –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ ====
async def process_wallet_address(message: types.Message, state: FSMContext):
    await state.update_data(wallet_address=message.text)
    await state.set_state(WalletState.waiting_for_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=get_cancel_keyboard())


# ==== –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–æ—à–µ–ª—å–∫–∞ ====
async def process_wallet_name(message: types.Message, state: FSMContext):
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletState.waiting_for_tokens)
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard([]))


# ==== –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≥–∞–ª–æ—á–∫–∏) ====
async def toggle_token(callback: types.CallbackQuery, state: FSMContext):
    token = callback.data.split("_")[1]
    data = await state.get_data()
    selected_tokens = data.get("selected_tokens", [])

    if token in selected_tokens:
        selected_tokens.remove(token)
    else:
        selected_tokens.append(token)

    await state.update_data(selected_tokens=selected_tokens)
    await callback.message.edit_text("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=get_tokens_keyboard(selected_tokens))


# ==== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ ====
async def confirm_tokens(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wallet_address = data.get("wallet_address")
    wallet_name = data.get("wallet_name")
    selected_tokens = data.get("selected_tokens", [])

    if not selected_tokens:
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!", show_alert=True)
        return

    db.add_wallet(wallet_address, wallet_name, ",".join(selected_tokens))
    await state.clear()
    await callback.message.edit_text("‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())


# ==== –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ ====
async def delete_wallet(callback: types.CallbackQuery):
    wallet_id = callback.data.split("_")[2]
    db.remove_wallet(wallet_id)
    await callback.message.edit_text("üóë –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu())


# ==== –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ====
async def cancel_operation(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=get_main_menu())


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã ====
def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    return builder.as_markup()


# ==== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –¥–≤–∞ —Ä—è–¥–∞) ====
def get_tokens_keyboard(selected_tokens):
    builder = InlineKeyboardBuilder()
    buttons = []

    for token_name, config in TOKEN_CONFIG.items():
        is_selected = "‚úÖ " if token_name in selected_tokens else ""
        buttons.append(types.InlineKeyboardButton(text=f"{is_selected}{token_name}", callback_data=f"toggle_token_{token_name}"))

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∞
    for i in range(0, len(buttons), 2):
        builder.row(*buttons[i:i+2])

    builder.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_tokens")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")

    return builder.as_markup()


# ==== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ====
def register_handlers(dp: Dispatcher):
    dp.message.register(wallet_control, Command("wallets"))
    dp.message.register(process_wallet_address, WalletState.waiting_for_address)
    dp.message.register(process_wallet_name, WalletState.waiting_for_name)
    dp.callback_query.register(toggle_token, CallbackData.filter("toggle_token_"))
    dp.callback_query.register(confirm_tokens, CallbackData.filter("confirm_tokens"))
    dp.callback_query.register(delete_wallet, CallbackData.filter("delete_wallet_"))
    dp.callback_query.register(cancel_operation, CallbackData.filter("cancel"))
    dp.callback_query.register(add_wallet_start, CallbackData.filter("add_wallet"))
    dp.callback_query.register(show_wallets, CallbackData.filter("show_wallets"))

# /webhook_server.py
from flask import Flask, request, jsonify
from aiogram import Bot
from config.settings import BOT_TOKEN, CHAT_ID, DEFAULT_THREAD_ID
from config.threads_config import DEFAULT_THREAD_ID as DEFAULT_FALLBACK_THREAD_ID
from utils.logger_config import logger, should_log
from app_config import db
import asyncio
import threading
import os
from decimal import Decimal

app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
loop = asyncio.get_event_loop()

def get_thread_id_for_token(token_name, contract_address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ thread_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        tracked_tokens = db.tracked_tokens.get_all_tracked_tokens()
        for token in tracked_tokens:
            if token[2] == token_name or token[1].lower() == contract_address.lower():
                return token[3] if token[3] and token[3].isdigit() else DEFAULT_FALLBACK_THREAD_ID
        return DEFAULT_FALLBACK_THREAD_ID
    except Exception as e:
        if should_log("api_errors"):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è thread_id –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_name} –∏–ª–∏ {contract_address}: {str(e)}")
        return DEFAULT_FALLBACK_THREAD_ID

async def convert_to_usd(value, contract_address, decimals=18):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ USD —á–µ—Ä–µ–∑ DexScreener API."""
    try:
        if not contract_address or not contract_address.startswith("0x"):
            return Decimal("0")
        base_url = f"https://api.dexscreener.com/latest/dex/tokens/arbitrum/{contract_address}"
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                response.raise_for_status()
                data = await response.json()
                if 'pair' in data and 'baseToken' in data['pair'] and 'priceUsd' in data['pair']['baseToken']:
                    price_usd = Decimal(str(data['pair']['baseToken']['priceUsd']))
                    value_dec = Decimal(str(value)) / Decimal(str(10 ** decimals))
                    return value_dec * price_usd
                if should_log("api_errors"):
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —á–µ—Ä–µ–∑ DexScreener API –¥–ª—è {contract_address}")
                return Decimal("0")
    except aiohttp.ClientResponseError as e:
        if should_log("api_errors"):
            if e.status == 404:
                logger.warning(f"–¢–æ–∫–µ–Ω {contract_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DexScreener API –¥–ª—è Arbitrum")
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DexScreener API –¥–ª—è {contract_address}: {str(e)}")
        return Decimal("0")
    except Exception as e:
        if should_log("api_errors"):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DexScreener API –¥–ª—è {contract_address}: {str(e)}")
        return Decimal("0")

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Moralis Streams API."""
    try:
        data = request.json
        if should_log("debug"):
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
        
        if 'txs' in data and data['txs']:
            tx = data['txs'][0]
            tx_hash = tx.get('hash', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            from_address = tx.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            to_address = tx.get('to', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            value = tx.get('value', '0')  # –í wei –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–ª–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è ERC20
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ —Ç–æ–∫–µ–Ω
            if 'logs' in tx and tx['logs']:
                for log in tx['logs']:
                    if 'topics' in log and log['topics'] and len(log['topics']) > 2:
                        # –≠—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (ERC20 Transfer)
                        contract_address = log['address']
                        token_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        decimals = 18  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
                        tracked_tokens = db.tracked_tokens.get_all_tracked_tokens()
                        for token in tracked_tokens:
                            if token[1].lower() == contract_address.lower():
                                token_name = token[2]
                                decimals = int(token[3]) if token[3] and token[3].isdigit() else 18
                                break
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ USD
                        amount_usd = convert_to_usd(value, contract_address, decimals)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
                        min_other_token_value = Decimal(db.settings.get_setting("MIN_OTHER_TOKEN_VALUE", "50"))
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
                        thread_id = get_thread_id_for_token(token_name, contract_address)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = (
                            f"üì¢ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∞!\n"
                            f"–¢–æ–∫–µ–Ω: `{token_name}`\n"
                            f"–•—ç—à: `{tx_hash}`\n"
                            f"–û—Ç: `{from_address[-4:]}`\n"
                            f"–ö: `{to_address[-4:]}`\n"
                            f"–°—É–º–º–∞: {Decimal(value) / Decimal(10 ** decimals):.6f} {token_name}\n"
                            f"–°—É–º–º–∞ (USD): ${amount_usd:.2f}\n"
                            f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](https://arbiscan.io/tx/{tx_hash})"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é (–¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
                        if token_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω" and amount_usd < min_other_token_value:
                            if should_log("transaction"):
                                logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ {contract_address} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞: —Å—É–º–º–∞ ${amount_usd:.2f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${min_other_token_value}")
                            return jsonify({"status": "success"}), 200
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        asyncio.run_coroutine_threadsafe(
                            bot.send_message(
                                chat_id=CHAT_ID,
                                text=message,
                                parse_mode="Markdown",
                                disable_web_page_preview=True,
                                message_thread_id=thread_id if thread_id != DEFAULT_FALLBACK_THREAD_ID else None
                            ),
                            loop
                        )
                        if should_log("transaction"):
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token_name}: {tx_hash} –≤ —Ç—Ä–µ–¥ {thread_id}")
                        return jsonify({"status": "success"}), 200
            else:
                # –ù–∞—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (ETH)
                amount_usd = await convert_to_usd(value, "0x0000000000000000000000000000000000000000", 18)  # ETH –Ω–∞ Arbitrum
                thread_id = DEFAULT_FALLBACK_THREAD_ID  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                
                message = (
                    f"üì¢ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n"
                    f"–•—ç—à: `{tx_hash}`\n"
                    f"–û—Ç: `{from_address[-4:]}`\n"
                    f"–ö: `{to_address[-4:]}`\n"
                    f"–°—É–º–º–∞: {Decimal(value) / Decimal(10 ** 18):.6f} ETH\n"
                    f"–°—É–º–º–∞ (USD): ${amount_usd:.2f}\n"
                    f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å](https://arbiscan.io/tx/{tx_hash})"
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                asyncio.run_coroutine_threadsafe(
                    bot.send_message(
                        chat_id=CHAT_ID,
                        text=message,
                        parse_mode="Markdown",
                        disable_web_page_preview=True,
                        message_thread_id=thread_id if thread_id != DEFAULT_FALLBACK_THREAD_ID else None
                    ),
                    loop
                )
                if should_log("transaction"):
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash} –≤ —Ç—Ä–µ–¥ {thread_id}")
        
        return jsonify({"status": "success"}), 200
    except Exception as e:
        if should_log("api_errors"):
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç–æ–º."""
    port = int(os.getenv("PORT", 8080))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 8080 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info(f"Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()
    logger.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤")
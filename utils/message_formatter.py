from aiogram.enums import ParseMode

def format_number(value):
    if value == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" or not value:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    try:
        num = float(value)
        if num == 0:
            return "0.00"
        elif 0 < num < 0.00001:  # –ú–µ–Ω—å—à–µ 0.00001 ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ—Ä—Ö–Ω–∏–º –∏–Ω–¥–µ–∫—Å–æ–º
            exponent = int(-1 * (num.log10() // 1))
            mantissa = num / (10 ** exponent)
            superscript = ''.join(['‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ'[int(d)] for d in str(exponent)])
            return f"0.0{superscript}1"
        elif 0.00001 <= num < 1:  # –û—Ç 0.00001 –¥–æ 1 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return f"{num:.6f}".rstrip('0').rstrip('.')
        elif 1 <= num < 1_000_000:  # –û—Ç 1 –¥–æ 1 –º–ª–Ω ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return f"{num:,.2f}"
        elif 1_000_000 <= num < 1_000_000_000:  # –ú–∏–ª–ª–∏–æ–Ω—ã
            return f"{num / 1_000_000:.2f}M"
        elif 1_000_000_000 <= num < 1_000_000_000_000:  # –ú–∏–ª–ª–∏–∞—Ä–¥—ã
            return f"{num / 1_000_000_000:.2f}B"
        else:  # –¢—Ä–∏–ª–ª–∏–æ–Ω—ã –∏ –±–æ–ª—å—à–µ
            return f"{num / 1_000_000_000_000:.2f}T"
    except (ValueError, TypeError, AttributeError):
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_swap_message(tx_hash, sender, sender_url, amount_in, token_in, token_in_url, amount_out, token_out, token_out_url, usd_value):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º usd_value –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        usd_value_str = str(usd_value) if usd_value != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        usd_status = ""
        if isinstance(usd_value, str) and "(" in usd_value and ")" in usd_value:
            usd_value_str, usd_status = usd_value.split(" (", 1)
            usd_status = f" ({usd_status.rstrip(')')}"  # –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –∏ —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        formatted_amount_in = format_number(amount_in)
        formatted_amount_out = format_number(amount_out)
        formatted_usd = format_number(usd_value_str) + usd_status  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üì¢ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [{sender}]({sender_url})\n"
            f"üì• –¢–æ–∫–µ–Ω IN: [{token_in}]({token_in_url}) ‚Äî {formatted_amount_in}\n"
            f"üì§ –¢–æ–∫–µ–Ω OUT: [{token_out}]({token_out_url}) ‚Äî {formatted_amount_out}\n"
            f"üí∞ USD: ${formatted_usd}\n"
            f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://arbiscan.io/tx/{tx_hash})"
        )
        return message, ParseMode.MARKDOWN
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", None
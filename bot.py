# /app/bot.py
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from interface.handlers import register_handlers, edit_wallet_command
from interface.keyboards import get_main_menu
from config.settings import BOT_TOKEN, CHAT_ID
from config.bot_instance import bot
from utils.logger_config import logger, update_log_settings, should_log
from transaction_manager import start_transaction_monitoring
from app_config import db
from flask import Flask, request, jsonify

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Aiogram
dp = Dispatcher(storage=MemoryStorage())

# Flask-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Moralis Streams
@app.route('/webhook', methods=['POST'])
async def webhook():
    if should_log("transaction"):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ POST-–∑–∞–ø–∏—Ç –≤—ñ–¥ Moralis Streams –Ω–∞ /webhook")
    data = request.get_json()
    if not data:
        logger.error("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–µ–±—Ö—É–∫-–∑–∞–ø–∏—Ç")
        return jsonify({"status": "error", "message": "No data received"}), 400
    
    if should_log("debug"):
        logger.debug(f"–î–∞–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {data}")
    
    # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥ Moralis (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç)
    try:
        tx_hash = data.get("txs", [{}])[0].get("hash", "–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ö–µ—à")
        message = f"–ù–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏—è–≤–ª–µ–Ω–∞!\n–•–µ—à: `{tx_hash}`"
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {tx_hash}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500
    
    return jsonify({"status": "success"}), 200

if should_log("interface"):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
register_handlers(dp)
if should_log("interface"):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /Editw_<wallet_id> –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
@dp.message(lambda message: message.text and message.text.startswith("/Editw_"))
async def dynamic_edit_wallet_command(message: types.Message):
    if should_log("interface"):
        logger.info(f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /Editw_ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id}: {message.text}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /Editw_ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await edit_wallet_command(message)

@dp.message(Command("start"))
async def start_command(message):
    if should_log("interface"):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id}")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    menu = get_main_menu()
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!", reply_markup=menu)

@dp.message(Command("get_last_transaction"))
async def get_last_transaction_command(message):
    if should_log("interface"):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_last_transaction –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id}")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_last_transaction –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@dp.message(Command("get_thread_id"))
async def get_thread_id_command(message):
    if should_log("interface"):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_thread_id –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.id}")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_thread_id –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    thread_id = message.message_thread_id if message.is_topic_message else "–ù–µ—Ç —Ç—Ä–µ–¥–∞"
    await message.answer(f"ID —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–¥–∞: `{thread_id}`", parse_mode="Markdown")

async def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ."""
    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', 8080, app)
    logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    await asyncio.to_thread(server.serve_forever)

async def main():
    if should_log("interface"):
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Aiogram polling —ñ Flask –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    flask_task = asyncio.create_task(run_flask())
    monitoring_task = asyncio.create_task(start_transaction_monitoring(bot, CHAT_ID))
    polling_task = dp.start_polling(bot)
    
    await asyncio.gather(flask_task, monitoring_task, polling_task)

if __name__ == "__main__":
    asyncio.run(main())
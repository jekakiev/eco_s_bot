import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from arbiscan import get_token_transactions  # –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
from message_formatter import format_swap_message  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
from wallets_config import WATCHED_WALLETS  # –ê–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤
from threads_config import TOKEN_CONFIG, DEFAULT_THREAD_ID  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–¥—ñ–≤

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
CHECK_INTERVAL = 10  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
CHAT_ID = -1002458140371  # Chat ID –≥—Ä—É–ø–∏

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async def check_token_transactions():
    last_tx_hash = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è

    while True:
        for wallet_address, wallet_name in WATCHED_WALLETS.items():
            transactions = get_token_transactions(wallet_address)

            if isinstance(transactions, list) and transactions:
                latest_tx = transactions[0]  # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–æ–≤–∞
                if last_tx_hash.get(wallet_address) == latest_tx["hash"]:
                    logging.info(f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {latest_tx['hash']} –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —Ü–µ —Ç–∞ –∂ —Å–∞–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è

                last_tx_hash[wallet_address] = latest_tx["hash"]

                token_name = latest_tx.get("token_in", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–∫–µ–Ω")
                token_data = TOKEN_CONFIG.get(token_name, {})
                thread_id = token_data.get("thread_id", DEFAULT_THREAD_ID)

                logging.info(f"üì© –ù–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {latest_tx['hash']} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_name} -> –¢—Ä–µ–¥ {thread_id}")

                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                text, parse_mode = format_swap_message(
                    tx_hash=latest_tx["hash"],
                    sender=wallet_name,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –≥–∞–º–∞–Ω—Ü—è
                    sender_url=f"https://arbiscan.io/address/{wallet_address}",
                    amount_in=latest_tx.get("amount_in", 0),
                    token_in=latest_tx.get("token_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                    token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                    amount_out=latest_tx.get("amount_out", 0),
                    token_out=latest_tx.get("token_out", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                    token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                    usd_value=latest_tx.get("usd_value", "–ù–µ–≤—ñ–¥–æ–º–æ")
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
                try:
                    await bot.send_message(
                        chat_id=CHAT_ID, 
                        message_thread_id=thread_id, 
                        text=text, 
                        parse_mode=parse_mode, 
                        disable_web_page_preview=True
                    )
                    logging.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É —Ç—Ä–µ–¥ {thread_id}: {latest_tx['hash']}")
                except Exception as e:
                    logging.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

        await asyncio.sleep(CHECK_INTERVAL)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from interface import register_handlers, get_main_menu
from arbiscan import get_token_transactions
from message_formatter import format_swap_message
from database import Database
from settings import BOT_TOKEN, CHECK_INTERVAL, CHAT_ID, LOG_TRANSACTIONS, LOG_SUCCESSFUL_TRANSACTIONS
from logger_config import logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
register_handlers(dp)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def check_token_transactions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö"""
    while True:
        try:
            if LOG_SUCCESSFUL_TRANSACTIONS:
                logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

            watched_wallets = db.get_all_wallets()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –ë–î
            for wallet in watched_wallets:
                wallet_address = wallet["address"]
                wallet_name = wallet["name"]
                transactions = get_token_transactions(wallet_address)

                if not isinstance(transactions, dict):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å list –Ω–∞ dict, —Ç–∞–∫ –∫–∞–∫ get_token_transactions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
                    if LOG_TRANSACTIONS:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞: get_token_transactions –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è {wallet_address}. –ü–æ–ª—É—á–µ–Ω–æ: {type(transactions)}")
                    continue

                if not transactions:
                    if LOG_SUCCESSFUL_TRANSACTIONS:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {wallet_address}")
                    continue

                logger.info(f"LOG_SUCCESSFUL_TRANSACTIONS: {LOG_SUCCESSFUL_TRANSACTIONS}")
                if LOG_SUCCESSFUL_TRANSACTIONS:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {wallet_address}")

                for tx_hash, tx_list in transactions.items():
                    latest_tx = tx_list[0]  # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ö–µ—à–∞
                    token_out = latest_tx.get("token_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    contract_address = latest_tx.get("token_out_address", "").lower()

                    if db.is_transaction_exist(tx_hash):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î
                        continue

                    db.add_transaction(tx_hash, wallet_address, token_out, latest_tx.get("usd_value", "0"))

                    thread_id = DEFAULT_THREAD_ID
                    for token_name, config in TOKEN_CONFIG.items():
                        if contract_address == config["contract_address"].lower():
                            thread_id = config["thread_id"]
                            if LOG_SUCCESSFUL_TRANSACTIONS:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {token_name} -> –¢—Ä–µ–¥ {thread_id}")
                            break
                    else:
                        if LOG_SUCCESSFUL_TRANSACTIONS:
                            logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_out} ({contract_address}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ {DEFAULT_THREAD_ID}")

                    text, parse_mode = format_swap_message(
                        tx_hash=tx_hash,
                        sender=wallet_name,
                        sender_url=f"https://arbiscan.io/address/{wallet_address}",
                        amount_in=latest_tx.get("amount_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_in=latest_tx.get("token_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                        amount_out=latest_tx.get("amount_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_out=token_out,
                        token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                        usd_value=latest_tx.get("usd_value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    )
                    try:
                        if LOG_SUCCESSFUL_TRANSACTIONS:
                            logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ {thread_id} –¥–ª—è {wallet_address}...")
                        await bot.send_message(
                            chat_id=CHAT_ID,
                            message_thread_id=thread_id,
                            text=text,
                            parse_mode=parse_mode,
                            disable_web_page_preview=True
                        )
                        if LOG_SUCCESSFUL_TRANSACTIONS:
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä–µ–¥ {thread_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        await asyncio.sleep(CHECK_INTERVAL)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
        asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
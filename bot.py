import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from interface import register_handlers, get_main_menu, get_wallet_control_keyboard
from arbiscan import get_token_transactions
from message_formatter import format_swap_message
from database import Database
from threads_config import TOKEN_CONFIG, DEFAULT_THREAD_ID
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    logger.info(f"MYSQL_HOST: {os.getenv('MYSQL_HOST')}")
    logger.info(f"MYSQL_USER: {os.getenv('MYSQL_USER')}")
    logger.info(f"MYSQL_PASSWORD: {os.getenv('MYSQL_PASSWORD')}")
    logger.info(f"MYSQL_DATABASE: {os.getenv('MYSQL_DATABASE')}")
    logger.info(f"MYSQL_PORT: {os.getenv('MYSQL_PORT', 3306)}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
db = Database()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
register_handlers(dp)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHECK_INTERVAL = 2  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
CHAT_ID = -1002458140371  # Chat ID –≥—Ä—É–ø–ø—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def check_token_transactions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö"""
    while True:
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

            watched_wallets = db.get_all_wallets()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –ë–î
            for wallet in watched_wallets:
                wallet_address = wallet["address"]
                wallet_name = wallet["name"]
                transactions = get_token_transactions(wallet_address)

                if not isinstance(transactions, list):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: get_token_transactions –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è {wallet_address}. –ü–æ–ª—É—á–µ–Ω–æ: {transactions}")
                    continue

                if not transactions:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {wallet_address}")
                    continue

                latest_tx = transactions[0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                tx_hash = latest_tx["hash"]
                token_out = latest_tx.get("token_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                contract_address = latest_tx.get("token_out_address", "").lower()

                if db.is_transaction_exist(tx_hash):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î
                    continue

                db.add_transaction(tx_hash, wallet_address, token_out, latest_tx.get("usd_value", "0"))

                thread_id = DEFAULT_THREAD_ID
                for token_name, config in TOKEN_CONFIG.items():
                    if contract_address == config["contract_address"].lower():
                        thread_id = config["thread_id"]
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {token_name} -> –¢—Ä–µ–¥ {thread_id}")
                        break
                else:
                    logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_out} ({contract_address}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ {DEFAULT_THREAD_ID}")

                text, parse_mode = format_swap_message(
                    tx_hash=tx_hash,
                    sender=wallet_name,
                    sender_url=f"https://arbiscan.io/address/{wallet_address}",
                    amount_in=latest_tx.get("amount_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    token_in=latest_tx.get("token_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                    amount_out=latest_tx.get("amount_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                    token_out=token_out,
                    token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                    usd_value=latest_tx.get("usd_value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                )

                try:
                    logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ {thread_id} –¥–ª—è {wallet_address}...")
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        message_thread_id=thread_id,
                        text=text,
                        parse_mode=parse_mode,
                        disable_web_page_preview=True
                    )
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä–µ–¥ {thread_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        await asyncio.sleep(CHECK_INTERVAL)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
@dp.message(Command("EDITw"))
async def edit_wallet_command(message: types.Message):
    wallet_id = int(message.get_args().split('_')[1])
    wallet = db.get_wallet_by_id(wallet_id)
    if not wallet:
        await message.answer("‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"–ò–º—è –∫–æ—à–µ–ª—å–∫–∞: {wallet['name']}\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet['address']}"
    await message.answer(text, reply_markup=get_wallet_control_keyboard(wallet_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(edit_wallet_command, Command("EDITw"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
        asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

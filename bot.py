import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from arbiscan import get_token_transactions  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
from message_formatter import format_swap_message  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
from wallets_config import WATCHED_WALLETS  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CHECK_INTERVAL = 10  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
THREAD_ID = 7  # Thread ID —Ç—Ä–µ–¥–∞
CHAT_ID = -1002458140371  # Chat ID –≥—Ä—É–ø–ø—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_chat_id (–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç—Ä–µ–¥–∞)
@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    thread_id = message.message_thread_id  # ID —Ç—Ä–µ–¥–∞ (–≤–µ—Ç–∫–∏)
    chat_info = f"üÜî Chat ID: `{message.chat.id}`"

    if thread_id:
        chat_info += f"\nüßµ Thread ID: `{thread_id}`"

    await message.answer(chat_info, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async def check_token_transactions():
    last_tx_hash = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞

    while True:
        for wallet_address, wallet_name in WATCHED_WALLETS.items():
            transactions = get_token_transactions(wallet_address)

            if isinstance(transactions, list) and transactions:
                latest_tx = transactions[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

                if last_tx_hash.get(wallet_address) != latest_tx["hash"]:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    last_tx_hash[wallet_address] = latest_tx["hash"]

                    text = format_swap_message(
                        tx_hash=latest_tx["hash"],
                        sender=wallet_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–æ—à–µ–ª—å–∫–∞
                        sender_url=f"https://arbiscan.io/address/{wallet_address}",
                        amount_in=latest_tx.get("amount_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_in=latest_tx.get("token_in", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                        amount_out=latest_tx.get("amount_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_out=latest_tx.get("token_out", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                        usd_value=latest_tx.get("usd_value", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    )

                    await bot.send_message(chat_id=CHAT_ID, message_thread_id=THREAD_ID, text=text, disable_web_page_preview=True)

        await asyncio.sleep(CHECK_INTERVAL)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–æ–∫–µ–Ω–æ–≤
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

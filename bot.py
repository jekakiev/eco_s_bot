import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from arbiscan import get_token_transactions  # –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
from message_formatter import format_swap_message  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
from wallets_config import WATCHED_WALLETS  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
from threads_config import TOKEN_CONFIG, DEFAULT_THREAD_ID  # –ú–∞–ø—ñ–Ω–≥ —Ç—Ä–µ–¥—ñ–≤

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
CHECK_INTERVAL = 10  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
CHAT_ID = -1002458140371  # ID –≥—Ä—É–ø–∏

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def start_command(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")

async def get_chat_id(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /get_chat_id"""
    thread_id = message.message_thread_id  # ID —Ç—Ä–µ–¥–∞
    chat_info = f"üÜî Chat ID: `{message.chat.id}`"

    if thread_id:
        chat_info += f"\nüßµ Thread ID: `{thread_id}`"

    await message.answer(chat_info, parse_mode="Markdown")

async def check_token_transactions():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è—Ö"""
    last_tx_hash = {}

    while True:
        logger.info("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
        for wallet_address, wallet_name in WATCHED_WALLETS.items():
            transactions = get_token_transactions(wallet_address)

            if not transactions:
                logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {wallet_address}")
                continue

            latest_tx = transactions[0]  # –û—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
            tx_hash = latest_tx["hash"]
            token_out = latest_tx.get("token_out", "–ù–µ–≤—ñ–¥–æ–º–æ")
            contract_address = latest_tx.get("token_out_address", "").lower()

            # –õ–æ–≥—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            logger.info(f"üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é: {tx_hash}")
            logger.info(f"üìå –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {contract_address}")
            logger.info(f"üìå –¢–æ–∫–µ–Ω: {token_out}")

            if last_tx_hash.get(wallet_address) == tx_hash:
                continue  # –Ø–∫—â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞

            last_tx_hash[wallet_address] = tx_hash

            thread_id = DEFAULT_THREAD_ID

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç—Ä–µ–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞
            for token_name, config in TOKEN_CONFIG.items():
                if contract_address == config["contract_address"].lower():
                    thread_id = config["thread_id"]
                    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å: {token_name} -> –¢—Ä–µ–¥ {thread_id}")
                    break
            else:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_out} ({contract_address}) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø—ñ–Ω–≥—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ {DEFAULT_THREAD_ID}")

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            text, parse_mode = format_swap_message(
                tx_hash=tx_hash,
                sender=wallet_name,
                sender_url=f"https://arbiscan.io/address/{wallet_address}",
                amount_in=latest_tx.get("amount_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_in=latest_tx.get("token_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                amount_out=latest_tx.get("amount_out", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_out=token_out,
                token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                usd_value=latest_tx.get("usd_value", "–ù–µ–≤—ñ–¥–æ–º–æ")
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç—Ä–µ–¥
            try:
                logger.info(f"üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç—Ä–µ–¥ {thread_id} –¥–ª—è {wallet_address}...")
                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=thread_id,
                    text=text,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True
                )
                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É —Ç—Ä–µ–¥ {thread_id}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

        await asyncio.sleep(CHECK_INTERVAL)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    dp.message.register(start_command, Command("start"))
    dp.message.register(get_chat_id, Command("get_chat_id"))

    asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –æ—á—ñ–∫—É—î –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

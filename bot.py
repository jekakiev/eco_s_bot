import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from interface import register_handlers, get_main_menu
from arbiscan import get_token_transactions
from message_formatter import format_swap_message
from database import Database
from threads_config import TOKEN_CONFIG, DEFAULT_THREAD_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–∞ –±–∞–∑—É –¥–∞–Ω–∏—Ö
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

# –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
register_handlers(dp)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
CHECK_INTERVAL = 2  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
CHAT_ID = -1002458140371  # Chat ID –≥—Ä—É–ø–∏

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start (–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é)
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó!", reply_markup=get_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /get_chat_id (–û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç—Ä–µ–¥–∞)
@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    thread_id = message.message_thread_id  # ID —Ç—Ä–µ–¥–∞ (–≥—ñ–ª–∫–∏)
    chat_info = f"üÜî Chat ID: `{message.chat.id}`"

    if thread_id:
        chat_info += f"\nüßµ Thread ID: `{thread_id}`"

    await message.answer(chat_info, parse_mode="Markdown")

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async def check_token_transactions():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è—Ö"""
    while True:
        logger.info("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")

        watched_wallets = db.get_all_wallets()  # –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –ë–î
        for wallet in watched_wallets:
            wallet_address = wallet["address"]
            wallet_name = wallet["name"]
            transactions = get_token_transactions(wallet_address)

            if not isinstance(transactions, list):
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: get_token_transactions –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è {wallet_address}. –û—Ç—Ä–∏–º–∞–Ω–æ: {transactions}")
                continue

            if not transactions:
                logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {wallet_address}")
                continue

            latest_tx = transactions[0]  # –û—Å—Ç–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
            tx_hash = latest_tx["hash"]
            token_out = latest_tx.get("token_out", "–ù–µ–≤—ñ–¥–æ–º–æ")
            contract_address = latest_tx.get("token_out_address", "").lower()

            if db.is_transaction_exist(tx_hash):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤ –ë–î
                continue

            db.add_transaction(tx_hash, wallet_address, token_out, latest_tx.get("usd_value", "0"))

            thread_id = DEFAULT_THREAD_ID
            for token_name, config in TOKEN_CONFIG.items():
                if contract_address == config["contract_address"].lower():
                    thread_id = config["thread_id"]
                    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å: {token_name} -> –¢—Ä–µ–¥ {thread_id}")
                    break
            else:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_out} ({contract_address}) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø—ñ–Ω–≥—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ {DEFAULT_THREAD_ID}")

            text, parse_mode = format_swap_message(
                tx_hash=tx_hash,
                sender=wallet_name,
                sender_url=f"https://arbiscan.io/address/{wallet_address}",
                amount_in=latest_tx.get("amount_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_in=latest_tx.get("token_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                amount_out=latest_tx.get("amount_out", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                token_out=token_out,
                token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                usd_value=latest_tx.get("usd_value", "–ù–µ–≤—ñ–¥–æ–º–æ")
            )

            try:
                logger.info(f"üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç—Ä–µ–¥ {thread_id} –¥–ª—è {wallet_address}...")
                await bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=thread_id,
                    text=text,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True
                )
                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É —Ç—Ä–µ–¥ {thread_id}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")

        await asyncio.sleep(CHECK_INTERVAL)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –æ—á—ñ–∫—É—î –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó!")
    asyncio.create_task(check_token_transactions())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

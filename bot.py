import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from arbiscan import get_token_transactions
from message_formatter import format_swap_message
from wallets_config import WATCHED_WALLETS
from threads_config import TOKEN_THREADS, DEFAULT_THREAD_ID
from logger import setup_logger

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = setup_logger()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async def check_token_transactions():
    last_tx_hash = {}

    while True:
        logger.info("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")

        for wallet_address, wallet_name in WATCHED_WALLETS.items():
            transactions = get_token_transactions(wallet_address)

            if isinstance(transactions, list) and transactions:
                latest_tx = transactions[0]
                tx_hash = latest_tx["hash"]

                if last_tx_hash.get(wallet_address) != tx_hash:
                    last_tx_hash[wallet_address] = tx_hash
                    token_name = latest_tx.get("token_out", "Other")
                    thread_id = TOKEN_THREADS.get(token_name, DEFAULT_THREAD_ID)

                    text, parse_mode = format_swap_message(
                        tx_hash=tx_hash,
                        sender=wallet_name,
                        sender_url=f"https://arbiscan.io/address/{wallet_address}",
                        amount_in=latest_tx.get("amount_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                        token_in=latest_tx.get("token_in", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                        token_in_url=f"https://arbiscan.io/token/{latest_tx.get('token_in_address', '')}",
                        amount_out=latest_tx.get("amount_out", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                        token_out=latest_tx.get("token_out", "–ù–µ–≤—ñ–¥–æ–º–æ"),
                        token_out_url=f"https://arbiscan.io/token/{latest_tx.get('token_out_address', '')}",
                        usd_value=latest_tx.get("usd_value", "–ù–µ–≤—ñ–¥–æ–º–æ")
                    )

                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—Ä–µ–¥ {thread_id} –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_name}")

                    await bot.send_message(
                        chat_id=-1002458140371, 
                        message_thread_id=thread_id,
                        text=text,
                        parse_mode=parse_mode,
                        disable_web_page_preview=True
                    )

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {wallet_address}")

        logger.info("‚è≥ –ß–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
        await asyncio.sleep(10)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /get_chat_id
@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    thread_id = message.message_thread_id
    chat_info = f"üÜî Chat ID: `{message.chat.id}`"

    if thread_id:
        chat_info += f"\nüßµ Thread ID: `{thread_id}`"

    await message.answer(chat_info, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    asyncio.create_task(check_token_transactions())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
